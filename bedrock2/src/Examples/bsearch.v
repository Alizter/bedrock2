Require Import Coq.Strings.String Coq.ZArith.ZArith.
Require Import coqutil.Z.Lia.
From bedrock2 Require Import NotationsInConstr ProgramLogic Map.Separation Array Scalars TailRecursion.

Require bedrock2.Examples.Demos.
Definition bsearch := @Demos.bsearch _ Demos.BinarySearch.StringNames.Inst.

From coqutil Require Import Datatypes.List Word.Interface Map.Interface. (* coercions word and rep *)
From bedrock2 Require Import Semantics BasicC64Semantics.

From coqutil Require Import Z.div_mod_to_equations.
From coqutil.Tactics Require Import syntactic_unify.
From coqutil.Tactics Require Import rdelta.

Require Import bedrock2.TODO_absint.

Strategy -1000 [word parameters]. (* TODO where should this go? *)

Module absint_test.
  Fixpoint goal (x : word) (n : nat) : Prop
    := match n with
       | O => True
       | S n' => let x := word.add x x in goal x n'
       end.
  Goal forall x X, 1 <= X < 2^60 -> unsigned.absint_eq (word.unsigned x) X -> goal x 7.
  Proof.
    cbv beta iota delta [goal].
    intros.

    let e := match goal with x := _ |- _ => x end in
    let e := constr:(word.ndn (word.xor (word.or (word.and (word.sub (word.mul (word.slu (word.sru e (word.of_Z 16)) (word.of_Z 3)) x) x) x) x) x) x) in
    let H := unsigned.zify_expr e in
    idtac H.
    exact I.
  Qed.


  Goal forall x y, 0 <= x < 5 -> 10 <= y < 20 -> True.
  Proof.
    intros.

    set (a := x+y).
    set (b := y+x).
    set (c := a*b+7).

    let e := constr:(a + y mod 2 * (b*(x*y/4)) + c) in
    let H := rbounded e in
    cbn in *.

    let e := constr:(a*c + b) in
    let H := rbounded e in
    idtac H;
    cbn in *.
    exact I.
  Qed.
End absint_test.

(* custom rewrite tactic to work around COQBUG(4885) *)
Ltac set_evars := repeat match goal with |- context[?e] => is_evar e; set e end.
Ltac subst_evars := repeat match goal with x := ?e |- _ => is_evar e; subst x end.
Ltac _ureplace_in_by pat hyp tac :=
  multimatch goal with
  | H: context [?lhs] |- _ =>
    assert_succeeds (idtac;
                     let pat := open_constr:(pat) in (* uconstr -> open_constr *)
                     let pat := lazymatch pat with ?pat => pat end in (* strip casts if any *)
                     syntactic_unify lhs pat);
    let T := type of lhs in
    let rhs := open_constr:(_:T) in
    let rhs := lazymatch rhs with ?rhs => rhs end in (* strip cast *)
    replace lhs with rhs in H by tac
  end.
Tactic Notation "ureplace" uconstr(pat) "in" hyp(hyp) "by" tactic3(tac) := _ureplace_in_by pat hyp tac.

Ltac _ureplace_by pat tac :=
  let g := fresh in
  let H := fresh in
  lazymatch goal with |- ?G => remember G as g eqn:H end;
  ureplace pat in H by tac;
  subst g.
Tactic Notation "ureplace" uconstr(pat) "by" tactic3(tac) := _ureplace_by pat tac.

Local Infix "^+" := word.add  (at level 50, left associativity).
Local Infix "^-" := word.sub  (at level 50, left associativity).
Local Infix "^<<" := word.slu  (at level 37, left associativity).
Local Infix "^>>" := word.sru  (at level 37, left associativity).
Local Notation "/_" := word.of_Z.
Local Notation "\_" := word.unsigned.
Local Open Scope Z_scope.
Lemma word__add_sub x y : (x^+y^-x) = y.
Proof.
  apply Properties.word.unsigned_inj.
  rewrite word.unsigned_sub, word.unsigned_add.
  unfold word.wrap.
  rewrite Zminus_mod_idemp_l, Z.add_simpl_l.
  apply Properties.word.wrap_unsigned.
Qed.

  From coqutil Require Import Z.div_mod_to_equations.

Monomorphic Definition word__monomorphic_ring_theory := Properties.word.ring_theory.
Add Ring word_ring : word__monomorphic_ring_theory.

Import HList List.
Instance spec_of_bsearch : spec_of "bsearch"%string := fun functions =>
  forall left right target xs R t m,
    sep (array scalar (word.of_Z 8) left xs) R m ->
    \_ (right ^- left) = 8*Z.of_nat (Datatypes.length xs) ->
    WeakestPrecondition.call functions
      "bsearch"%string t m (left::right::target::nil)%list
      (fun t' m' rets => t=t' /\ sep (array scalar (word.of_Z 8) left xs) R m' /\ exists i, rets = (i::nil)%list /\
      ((*sorted*)False -> True)
      ).

From coqutil.Tactics Require Import letexists rdelta.
From coqutil.Macros Require Import symmetry.
Import PrimitivePair.

Local Instance mapok: map.ok mem := SortedListWord.ok (Naive.word 64 eq_refl) _.
Local Instance wordok: coqutil.Word.Interface.word.ok word := coqutil.Word.Naive.ok _ _.
Local Instance byteok: coqutil.Word.Interface.word.ok byte := coqutil.Word.Naive.ok _ _.

Set Printing Depth 99999999.
Require Import AdmitAxiom.

Local Unset Simplex. (* COQBUG(9615) *)

Lemma swap_swap_ok : program_logic_goal_for_function! bsearch.
Proof.
  repeat straightline.

  refine (
    tailrec (HList.polymorphic_list.cons _ (HList.polymorphic_list.cons _ HList.polymorphic_list.nil)) ("left"::"right"::"target"::nil)%list%string
        (fun l xs R t m left right target => PrimitivePair.pair.mk
                                               (sep (array scalar (word.of_Z 8) left xs) R m /\
                                                \_ (right ^- left) = 8*Z.of_nat (Datatypes.length xs) /\
                                                List.length xs = l)
        (fun        T M LEFT RIGHT TARGET => T = t /\ sep (array scalar (word.of_Z 8) left xs) R M))
        lt _ _ _ _ _ _ _);
    cbn [reconstruct map.putmany_of_list HList.tuple.to_list
         HList.hlist.foralls HList.tuple.foralls
         HList.hlist.existss HList.tuple.existss
         HList.hlist.apply  HList.tuple.apply
         HList.hlist
         List.repeat Datatypes.length
         HList.polymorphic_list.repeat HList.polymorphic_list.length
         PrimitivePair.pair._1 PrimitivePair.pair._2] in *.
  1,2,3,5: case proof_admitted.
  repeat straightline.
  2: case proof_admitted.
  subst br. subst v0.
  seprewrite @array_address_inbounds;
    [ ..|(* if expression *) exact eq_refl|letexists; split; [repeat straightline|]]. (* determines element *)
  1, 2 : case proof_admitted.
  (* split if cases *) split; repeat straightline. (* code is processed, loop-go-again goals left behind *)
  2: case proof_admitted.
  repeat letexists.
  split; [repeat straightline|].
  repeat letexists. repeat split.
  1,2,3,4,5 : case proof_admitted.
  destruct H8.
  repeat match goal with x := _ |- _ => subst x end.
  Info 3 SeparationLogic.seprewrite_in (symmetry! @array_address_inbounds) H9; [|case proof_admitted..].
  destruct x.
  all: case proof_admitted.
  Grab Existential Variables.
  all : case proof_admitted.
  Set Printing All.
  Set Printing Width 1000.
  Show Proof.

  Check
((fun functions : list (prod (@Syntax.funname (@syntax parameters)) (prod (prod (list (@Syntax.varname (@syntax parameters))) (list (@Syntax.varname (@syntax parameters)))) (@Syntax.cmd.cmd (@syntax parameters)))) =>
  (let c : @Syntax.cmd.cmd (Syntax.Build_parameters string string string) :=
     @Syntax.cmd.cond (Syntax.Build_parameters string string string)
       (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.ltu (@Syntax.expr.load (Syntax.Build_parameters string string string) Syntax.access_size.word (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))))
       (@Syntax.cmd.set (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))) (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.add (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))) (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO (xO xH)))))))
       (@Syntax.cmd.set (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString))))) in
   let c0 : @Syntax.cmd.cmd (Syntax.Build_parameters string string string) := @Syntax.cmd.seq (Syntax.Build_parameters string string string) c (@Syntax.cmd.unset (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))) in
   let c1 : @Syntax.cmd.cmd (Syntax.Build_parameters string string string) :=
     @Syntax.cmd.seq (Syntax.Build_parameters string string string)
       (@Syntax.cmd.set (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))
          (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.add (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))
             (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.slu
                (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sru (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sub (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))
                   (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH))))) (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH)))))) c0 in
   let c2 : @Syntax.cmd.cmd (Syntax.Build_parameters string string string) := @Syntax.cmd.while (Syntax.Build_parameters string string string) (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sub (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) c1 in
   let _string_to_ident : string2ident.Context.list := string2ident.Context.nil in
   (fun (left right target : @word.rep (@width parameters) (@word parameters)) (xs : list (@word.rep (@width parameters) (@word parameters))) (R : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (t : @trace parameters) (m : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) left xs) R m)
      (_ : @eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) right left)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) xs)))) =>
    (let H1 :
       @eq bool true
         (@funname_eqb parameters (String (Ascii.Ascii false true false false false true true false) (String (Ascii.Ascii true true false false true true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true false false false true true false) (String (Ascii.Ascii false false false true false true true false) EmptyString))))))) (String (Ascii.Ascii false true false false false true true false) (String (Ascii.Ascii true true false false true true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true false false false true true false) (String (Ascii.Ascii false false false true false true true false) EmptyString)))))))) :=
       @eq_refl bool
         (@funname_eqb parameters (String (Ascii.Ascii false true false false false true true false) (String (Ascii.Ascii true true false false true true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true false false false true true false) (String (Ascii.Ascii false false false true false true true false) EmptyString))))))) (String (Ascii.Ascii false true false false false true true false) (String (Ascii.Ascii true true false false true true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true false false false true true false) (String (Ascii.Ascii false false false true false true true false) EmptyString))))))))
       in
     @eq_ind bool true
       (fun b : bool =>
        match b return Prop with
        | true =>
            @WeakestPrecondition.func parameters (@WeakestPrecondition.call parameters functions)
              (@Datatypes.pair (prod (list string) (list string)) (@Syntax.cmd.cmd (Syntax.Build_parameters string string string))
                 (@Datatypes.pair (list string) (list string)
                    (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                       (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))
                    (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))) (@nil string))) c2) t m (@cons (@word.rep (@width parameters) (@word parameters)) left (@cons (@word.rep (@width parameters) (@word parameters)) right (@cons (@word.rep (@width parameters) (@word parameters)) target (@nil (@word.rep (@width parameters) (@word parameters))))))
              (fun (t' : @trace parameters) (m' : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (rets : list (@word.rep (@width parameters) (@word parameters))) =>
               and (@eq (@trace parameters) t t') (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) left xs) R m') (@ex (@word.rep (@width parameters) (@word parameters)) (fun i : @word.rep (@width parameters) (@word parameters) => and (@eq (list (@word.rep (@width parameters) (@word parameters))) rets (@cons (@word.rep (@width parameters) (@word parameters)) i (@nil (@word.rep (@width parameters) (@word parameters))))) (forall _ : False, True)))))
        | false =>
            @WeakestPrecondition.call parameters functions (String (Ascii.Ascii false true false false false true true false) (String (Ascii.Ascii true true false false true true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true false false false true true false) (String (Ascii.Ascii false false false true false true true false) EmptyString))))))) t m (@cons (@word.rep (@width parameters) (@word parameters)) left (@cons (@word.rep (@width parameters) (@word parameters)) right (@cons (@word.rep (@width parameters) (@word parameters)) target (@nil (@word.rep (@width parameters) (@word parameters))))))
              (fun (t' : @trace parameters) (m' : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (rets : list (@word.rep (@width parameters) (@word parameters))) =>
               and (@eq (@trace parameters) t t') (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) left xs) R m') (@ex (@word.rep (@width parameters) (@word parameters)) (fun i : @word.rep (@width parameters) (@word parameters) => and (@eq (list (@word.rep (@width parameters) (@word parameters))) rets (@cons (@word.rep (@width parameters) (@word parameters)) i (@nil (@word.rep (@width parameters) (@word parameters))))) (forall _ : False, True)))))
        end)
       (((let l : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) :=
            @map.put (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)
              (@map.put (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) (@map.put (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) (@map.empty (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))) left)
                 (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) right) (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) target in
          @ex_intro (@map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters))
            (fun l0 : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) =>
             and
               (@eq (option (@map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)))
                  (@map.of_list (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)
                     (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                        (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))
                     (@cons (@word.rep (@width parameters) (@word parameters)) left (@cons (@word.rep (@width parameters) (@word parameters)) right (@cons (@word.rep (@width parameters) (@word parameters)) target (@nil (@word.rep (@width parameters) (@word parameters))))))) (@Some (@map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) l0))
               (@WeakestPrecondition.cmd parameters (@WeakestPrecondition.call parameters functions) c2 t m l0
                  (fun (t0 : @trace parameters) (m0 : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (l1 : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) =>
                   @WeakestPrecondition.list_map (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@WeakestPrecondition.get parameters l1) (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))) (@nil string))
                     (fun rets : list (@word.rep (@width parameters) (@word parameters)) => and (@eq (@trace parameters) t t0) (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) left xs) R m0) (@ex (@word.rep (@width parameters) (@word parameters)) (fun i : @word.rep (@width parameters) (@word parameters) => and (@eq (list (@word.rep (@width parameters) (@word parameters))) rets (@cons (@word.rep (@width parameters) (@word parameters)) i (@nil (@word.rep (@width parameters) (@word parameters))))) (forall _ : False, True)))))))) l
            (@conj
               (@eq (option (@map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)))
                  (@map.of_list (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)
                     (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                        (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))
                     (@cons (@word.rep (@width parameters) (@word parameters)) left (@cons (@word.rep (@width parameters) (@word parameters)) right (@cons (@word.rep (@width parameters) (@word parameters)) target (@nil (@word.rep (@width parameters) (@word parameters))))))) (@Some (@map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) l))
               (@WeakestPrecondition.cmd parameters (@WeakestPrecondition.call parameters functions) c2 t m l
                  (fun (t0 : @trace parameters) (m0 : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (l0 : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) =>
                   @WeakestPrecondition.list_map (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@WeakestPrecondition.get parameters l0) (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))) (@nil string))
                     (fun rets : list (@word.rep (@width parameters) (@word parameters)) => and (@eq (@trace parameters) t t0) (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) left xs) R m0) (@ex (@word.rep (@width parameters) (@word parameters)) (fun i : @word.rep (@width parameters) (@word parameters) => and (@eq (list (@word.rep (@width parameters) (@word parameters))) rets (@cons (@word.rep (@width parameters) (@word parameters)) i (@nil (@word.rep (@width parameters) (@word parameters))))) (forall _ : False, True)))))))
               (@eq_refl (option (@map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)))
                  (@map.of_list (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)
                     (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                        (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))
                     (@cons (@word.rep (@width parameters) (@word parameters)) left (@cons (@word.rep (@width parameters) (@word parameters)) right (@cons (@word.rep (@width parameters) (@word parameters)) target (@nil (@word.rep (@width parameters) (@word parameters))))))))
               (@tailrec parameters (fun (trace : list (prod (prod (prod (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (@Syntax.actname (@syntax parameters))) (list (@word.rep (@width parameters) (@word parameters)))) (prod (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (list (@word.rep (@width parameters) (@word parameters)))))) (m0 : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (act : @Syntax.actname (@syntax parameters)) (args : list (@word.rep (@width parameters) (@word parameters))) => ok trace m0 act args) functions
                  (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sub (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) c1 t l m
                  (@polymorphic_list.cons Type (list (@word.rep (@width parameters) (@word parameters))) (@polymorphic_list.cons Type (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@polymorphic_list.nil Type)))
                  (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                     (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))
                  (match
                     proof_admitted
                     return
                       (tuple (@word.rep (@width parameters) (@word parameters))
                          (@Datatypes.length (@Syntax.varname (@syntax parameters))
                             (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))))
                   with
                   end
                   :
                   tuple (@word.rep (@width parameters) (@word parameters))
                     (@Datatypes.length (@Syntax.varname (@syntax parameters))
                        (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                           (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))))
                  ((match
                      proof_admitted
                      return
                        (@enforce parameters
                           (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                              (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))
                           match
                             proof_admitted
                             return
                               (tuple (@word.rep (@width parameters) (@word parameters))
                                  (@Datatypes.length (@Syntax.varname (@syntax parameters))
                                     (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                        (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))))
                           with
                           end l)
                    with
                    end
                    :
                    @enforce parameters
                      (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                         (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))
                      match
                        proof_admitted
                        return
                          (tuple (@word.rep (@width parameters) (@word parameters))
                             (@Datatypes.length (@Syntax.varname (@syntax parameters))
                                (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                   (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))))
                      with
                      end l)
                   :
                   @enforce parameters
                     (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                        (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))
                     (match
                        proof_admitted
                        return
                          (tuple (@word.rep (@width parameters) (@word parameters))
                             (@Datatypes.length (@Syntax.varname (@syntax parameters))
                                (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                   (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))))
                      with
                      end
                      :
                      tuple (@word.rep (@width parameters) (@word parameters))
                        (@Datatypes.length (@Syntax.varname (@syntax parameters))
                           (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                              (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string)))))) l)
                  (fun (t0 : @trace parameters) (m0 : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (l0 : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) =>
                   @WeakestPrecondition.list_map (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@WeakestPrecondition.get parameters l0) (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))) (@nil string))
                     (fun rets : list (@word.rep (@width parameters) (@word parameters)) => and (@eq (@trace parameters) t t0) (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) left xs) R m0) (@ex (@word.rep (@width parameters) (@word parameters)) (fun i : @word.rep (@width parameters) (@word parameters) => and (@eq (list (@word.rep (@width parameters) (@word parameters))) rets (@cons (@word.rep (@width parameters) (@word parameters)) i (@nil (@word.rep (@width parameters) (@word parameters))))) (forall _ : False, True)))))) nat
                  (fun (l0 : nat) (xs0 : list (@word.rep (@width parameters) (@word parameters))) (R0 : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (t0 : @trace parameters) (m0 : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (left0 right0 _ : @word.rep (@width parameters) (@word parameters)) =>
                   @pair.mk Prop (fun _ : Prop => forall (_ : @trace parameters) (_ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)), Prop)
                     (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) left0 xs0) R0 m0) (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) right0 left0)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) xs0)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) xs0) l0)))
                     (fun (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ _ _ : @word.rep (@width parameters) (@word parameters)) => and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) left0 xs0) R0 M))) lt ((match proof_admitted return (@well_founded nat lt) with
end : @well_founded nat lt) : @well_founded nat lt) (match proof_admitted return nat with
end : nat) (match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
end : list (@word.rep (@width parameters) (@word parameters)))
                  (match proof_admitted return (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) with
                   end : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                  ((match
                      proof_admitted
                      return
                        (and
                           (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                              (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))
                                 (@pair._1 _ _
                                    match
                                      proof_admitted
                                      return
                                        (tuple (@word.rep (@width parameters) (@word parameters))
                                           (@Datatypes.length (@Syntax.varname (@syntax parameters))
                                              (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                                 (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))))
                                    with
                                    end) match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                         end) match proof_admitted return (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) with
                                              end m)
                           (and
                              (@eq Z
                                 (@word.unsigned (@width parameters) (@word parameters)
                                    (@word.sub (@width parameters) (@word parameters)
                                       (@pair._1 _ _
                                          (@pair._2 _ _
                                             match
                                               proof_admitted
                                               return
                                                 (tuple (@word.rep (@width parameters) (@word parameters))
                                                    (@Datatypes.length (@Syntax.varname (@syntax parameters))
                                                       (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                                          (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))))
                                             with
                                             end))
                                       (@pair._1 _ _
                                          match
                                            proof_admitted
                                            return
                                              (tuple (@word.rep (@width parameters) (@word parameters))
                                                 (@Datatypes.length (@Syntax.varname (@syntax parameters))
                                                    (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                                       (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))))
                                          with
                                          end))) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                 end)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                                                                        end) match proof_admitted return nat with
                                                                                                                                                                                                                                                             end)))
                    with
                    end
                    :
                    @pair._1 _ _
                      (@hlist.apply
                         (@polymorphic_list.repeat Type (@word.rep (@width parameters) (@word parameters))
                            (@Datatypes.length (@Syntax.varname (@syntax parameters))
                               (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                  (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))))
                         (pair.pair Prop
                            (fun _ : Prop =>
                             forall (_ : @trace parameters) (_ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)),
                             ufunc (@word.rep (@width parameters) (@word parameters))
                               (@Datatypes.length (@Syntax.varname (@syntax parameters))
                                  (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                     (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))) Prop))
                         (@hlist.apply (@polymorphic_list.cons Type (list (@word.rep (@width parameters) (@word parameters))) (@polymorphic_list.cons Type (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@polymorphic_list.nil Type)))
                            (forall (_ : @trace parameters) (_ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)),
                             ufunc (@word.rep (@width parameters) (@word parameters))
                               (@Datatypes.length (@Syntax.varname (@syntax parameters))
                                  (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                     (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string)))))
                               (pair.pair Prop
                                  (fun _ : Prop =>
                                   forall (_ : @trace parameters) (_ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)),
                                   ufunc (@word.rep (@width parameters) (@word parameters))
                                     (@Datatypes.length (@Syntax.varname (@syntax parameters))
                                        (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                           (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))) Prop)))
                            (fun (xs0 : list (@word.rep (@width parameters) (@word parameters))) (R0 : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (t0 : @trace parameters) (m0 : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (left0 right0 _ : @word.rep (@width parameters) (@word parameters)) =>
                             @pair.mk Prop (fun _ : Prop => forall (_ : @trace parameters) (_ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)), Prop)
                               (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) left0 xs0) R0 m0) (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) right0 left0)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) xs0)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) xs0) match proof_admitted return nat with
end)))
                               (fun (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ _ _ : @word.rep (@width parameters) (@word parameters)) => and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) left0 xs0) R0 M)))
                            (@pair.mk (list (@word.rep (@width parameters) (@word parameters))) (fun _ : list (@word.rep (@width parameters) (@word parameters)) => pair.pair (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (fun _ : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop => unit)) match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 end
                               (@pair.mk (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (fun _ : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop => unit) match proof_admitted return (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) with
                                                                                                                                                                                                                                                                                                                                                                           end tt)) t m)
                         match
                           proof_admitted
                           return
                             (tuple (@word.rep (@width parameters) (@word parameters))
                                (@Datatypes.length (@Syntax.varname (@syntax parameters))
                                   (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                      (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))))
                         with
                         end))
                   :
                   @pair._1 _ _
                     (@hlist.apply
                        (@polymorphic_list.repeat Type (@word.rep (@width parameters) (@word parameters))
                           (@Datatypes.length (@Syntax.varname (@syntax parameters))
                              (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                 (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))))
                        (pair.pair Prop
                           (fun _ : Prop =>
                            forall (_ : @trace parameters) (_ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)),
                            ufunc (@word.rep (@width parameters) (@word parameters))
                              (@Datatypes.length (@Syntax.varname (@syntax parameters))
                                 (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                    (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))) Prop))
                        (@hlist.apply (@polymorphic_list.cons Type (list (@word.rep (@width parameters) (@word parameters))) (@polymorphic_list.cons Type (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@polymorphic_list.nil Type)))
                           (forall (_ : @trace parameters) (_ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)),
                            ufunc (@word.rep (@width parameters) (@word parameters))
                              (@Datatypes.length (@Syntax.varname (@syntax parameters))
                                 (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                    (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string)))))
                              (pair.pair Prop
                                 (fun _ : Prop =>
                                  forall (_ : @trace parameters) (_ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)),
                                  ufunc (@word.rep (@width parameters) (@word parameters))
                                    (@Datatypes.length (@Syntax.varname (@syntax parameters))
                                       (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                          (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))) Prop)))
                           ((fun (l0 : nat) (xs0 : list (@word.rep (@width parameters) (@word parameters))) (R0 : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (t0 : @trace parameters) (m0 : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (left0 right0 _ : @word.rep (@width parameters) (@word parameters)) =>
                             @pair.mk Prop (fun _ : Prop => forall (_ : @trace parameters) (_ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)), Prop)
                               (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) left0 xs0) R0 m0) (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) right0 left0)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) xs0)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) xs0) l0)))
                               (fun (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ _ _ : @word.rep (@width parameters) (@word parameters)) => and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) left0 xs0) R0 M))) (match proof_admitted return nat with
end : nat))
                           (@pair.mk (list (@word.rep (@width parameters) (@word parameters))) (fun _ : list (@word.rep (@width parameters) (@word parameters)) => (fix hlist (argts : polymorphic_list.list Type) : Type := match argts return Type with
                                                                                                                                                                                                                             | polymorphic_list.nil => unit
                                                                                                                                                                                                                             | polymorphic_list.cons T argts' => pair.pair T (fun _ : T => hlist argts')
                                                                                                                                                                                                                             end) (@polymorphic_list.cons Type (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@polymorphic_list.nil Type))) (match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                        end : list (@word.rep (@width parameters) (@word parameters)))
                              (@pair.mk (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (fun _ : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop => (fix hlist (argts : polymorphic_list.list Type) : Type := match argts return Type with
                                                                                                                                                                                                                                                                                                                                                                                                                              | polymorphic_list.nil => unit
                                                                                                                                                                                                                                                                                                                                                                                                                              | polymorphic_list.cons T argts' => pair.pair T (fun _ : T => hlist argts')
                                                                                                                                                                                                                                                                                                                                                                                                                              end) (@polymorphic_list.nil Type)) (match proof_admitted return (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  end : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) tt)) t m)
                        (match
                           proof_admitted
                           return
                             (tuple (@word.rep (@width parameters) (@word parameters))
                                (@Datatypes.length (@Syntax.varname (@syntax parameters))
                                   (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                      (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))))
                         with
                         end
                         :
                         tuple (@word.rep (@width parameters) (@word parameters))
                           (@Datatypes.length (@Syntax.varname (@syntax parameters))
                              (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                 (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))))))
                  (((fun (v : nat) (x : list (@word.rep (@width parameters) (@word parameters))) (x0 : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (t0 : @trace parameters) (m0 : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (x1 x2 x3 : @word.rep (@width parameters) (@word parameters)) =>
                     let localsmap : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) :=
                       @map.put (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)
                         (@map.put (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) (@map.put (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) (@map.empty (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))) x1)
                            (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) x2) (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) x3 in
                     fun H2 : and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 m0) (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x) v)) =>
                     match
                       H2
                       return
                         (@Markers.unique Prop
                            (@Markers.left Prop
                               (@ex (@word.rep (@width parameters) (@word parameters))
                                  (fun br : @word.rep (@width parameters) (@word parameters) =>
                                   @Markers.split Prop
                                     (and (@WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sub (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@eq (@word.rep (@width parameters) (@word parameters)) br))
                                        (@Markers.right Prop
                                           (@Markers.split Prop
                                              (and
                                                 (forall _ : not (@eq Z (@word.unsigned (@width parameters) (@word parameters) br) Z0),
                                                  @WeakestPrecondition.cmd parameters (@WeakestPrecondition.call parameters functions) c1 t0 m0 localsmap
                                                    (fun (t' : @trace parameters) (m' : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (localsmap' : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) =>
                                                     @Markers.unique Prop
                                                       (@Markers.left Prop
                                                          (@ex (@word.rep (@width parameters) (@word parameters))
                                                             (fun x4 : @word.rep (@width parameters) (@word parameters) =>
                                                              @ex (@word.rep (@width parameters) (@word parameters))
                                                                (fun x5 : @word.rep (@width parameters) (@word parameters) =>
                                                                 @ex (@word.rep (@width parameters) (@word parameters))
                                                                   (fun x6 : @word.rep (@width parameters) (@word parameters) =>
                                                                    @Markers.split Prop
                                                                      (and
                                                                         (@enforce parameters
                                                                            (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                                                               (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))
                                                                            (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit))) x4 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit)) x5 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit) x6 tt))) localsmap')
                                                                         (@Markers.right Prop
                                                                            (@Markers.unique Prop
                                                                               (@Markers.left Prop
                                                                                  (@ex (list (@word.rep (@width parameters) (@word parameters)))
                                                                                     (fun x7 : list (@word.rep (@width parameters) (@word parameters)) =>
                                                                                      @ex (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                        (fun x8 : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop =>
                                                                                         @ex nat
                                                                                           (fun v' : nat =>
                                                                                            @Markers.split Prop
                                                                                              (and (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 m') (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x5 x4)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7) v')))
                                                                                                 (@Markers.right Prop
                                                                                                    (@Markers.split Prop
                                                                                                       (and (lt v' v)
                                                                                                          (forall (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : and (@eq (@trace parameters) T t') (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 M)),
                                                                                                           and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 M)))))))))))))))))))))
                                                 (forall _ : @eq Z (@word.unsigned (@width parameters) (@word parameters) br) Z0, and (@eq (@trace parameters) t0 t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 m0))))))))))
                     with
                     | conj H3 H4 =>
                         match
                           H4
                           return
                             (@Markers.unique Prop
                                (@Markers.left Prop
                                   (@ex (@word.rep (@width parameters) (@word parameters))
                                      (fun br : @word.rep (@width parameters) (@word parameters) =>
                                       @Markers.split Prop
                                         (and
                                            (@WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sub (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@eq (@word.rep (@width parameters) (@word parameters)) br))
                                            (@Markers.right Prop
                                               (@Markers.split Prop
                                                  (and
                                                     (forall _ : not (@eq Z (@word.unsigned (@width parameters) (@word parameters) br) Z0),
                                                      @WeakestPrecondition.cmd parameters (@WeakestPrecondition.call parameters functions) c1 t0 m0 localsmap
                                                        (fun (t' : @trace parameters) (m' : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (localsmap' : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) =>
                                                         @Markers.unique Prop
                                                           (@Markers.left Prop
                                                              (@ex (@word.rep (@width parameters) (@word parameters))
                                                                 (fun x4 : @word.rep (@width parameters) (@word parameters) =>
                                                                  @ex (@word.rep (@width parameters) (@word parameters))
                                                                    (fun x5 : @word.rep (@width parameters) (@word parameters) =>
                                                                     @ex (@word.rep (@width parameters) (@word parameters))
                                                                       (fun x6 : @word.rep (@width parameters) (@word parameters) =>
                                                                        @Markers.split Prop
                                                                          (and
                                                                             (@enforce parameters
                                                                                (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                                                                   (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))
                                                                                (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit))) x4 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit)) x5 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit) x6 tt))) localsmap')
                                                                             (@Markers.right Prop
                                                                                (@Markers.unique Prop
                                                                                   (@Markers.left Prop
                                                                                      (@ex (list (@word.rep (@width parameters) (@word parameters)))
                                                                                         (fun x7 : list (@word.rep (@width parameters) (@word parameters)) =>
                                                                                          @ex (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                            (fun x8 : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop =>
                                                                                             @ex nat
                                                                                               (fun v' : nat =>
                                                                                                @Markers.split Prop
                                                                                                  (and (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 m') (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x5 x4)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7) v')))
                                                                                                     (@Markers.right Prop
                                                                                                        (@Markers.split Prop
                                                                                                           (and (lt v' v)
                                                                                                              (forall (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : and (@eq (@trace parameters) T t') (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 M)),
                                                                                                               and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 M)))))))))))))))))))))
                                                     (forall _ : @eq Z (@word.unsigned (@width parameters) (@word parameters) br) Z0, and (@eq (@trace parameters) t0 t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 m0))))))))))
                         with
                         | conj H5 H6 =>
                             (let br : @word.rep (@width parameters) (@word parameters) := @word.sub (@width parameters) (@word parameters) x2 (x1 : @word.rep (@width parameters) (@word parameters)) in
                              @ex_intro (@word.rep (@width parameters) (@word parameters))
                                (fun br0 : @word.rep (@width parameters) (@word parameters) =>
                                 @Markers.split Prop
                                   (and (@WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sub (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@eq (@word.rep (@width parameters) (@word parameters)) br0))
                                      (@Markers.right Prop
                                         (@Markers.split Prop
                                            (and
                                               (forall _ : not (@eq Z (@word.unsigned (@width parameters) (@word parameters) br0) Z0),
                                                @WeakestPrecondition.cmd parameters (@WeakestPrecondition.call parameters functions) c1 t0 m0 localsmap
                                                  (fun (t' : @trace parameters) (m' : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (localsmap' : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) =>
                                                   @Markers.unique Prop
                                                     (@Markers.left Prop
                                                        (@ex (@word.rep (@width parameters) (@word parameters))
                                                           (fun x4 : @word.rep (@width parameters) (@word parameters) =>
                                                            @ex (@word.rep (@width parameters) (@word parameters))
                                                              (fun x5 : @word.rep (@width parameters) (@word parameters) =>
                                                               @ex (@word.rep (@width parameters) (@word parameters))
                                                                 (fun x6 : @word.rep (@width parameters) (@word parameters) =>
                                                                  @Markers.split Prop
                                                                    (and
                                                                       (@enforce parameters
                                                                          (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                                                             (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))
                                                                          (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit))) x4 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit)) x5 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit) x6 tt))) localsmap')
                                                                       (@Markers.right Prop
                                                                          (@Markers.unique Prop
                                                                             (@Markers.left Prop
                                                                                (@ex (list (@word.rep (@width parameters) (@word parameters)))
                                                                                   (fun x7 : list (@word.rep (@width parameters) (@word parameters)) =>
                                                                                    @ex (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                      (fun x8 : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop =>
                                                                                       @ex nat
                                                                                         (fun v' : nat =>
                                                                                          @Markers.split Prop
                                                                                            (and (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 m') (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x5 x4)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7) v')))
                                                                                               (@Markers.right Prop
                                                                                                  (@Markers.split Prop
                                                                                                     (and (lt v' v)
                                                                                                        (forall (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : and (@eq (@trace parameters) T t') (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 M)),
                                                                                                         and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 M)))))))))))))))))))))
                                               (forall _ : @eq Z (@word.unsigned (@width parameters) (@word parameters) br0) Z0, and (@eq (@trace parameters) t0 t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 m0))))))) br
                                (@conj (@WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sub (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@eq (@word.rep (@width parameters) (@word parameters)) br))
                                   (@Markers.right Prop
                                      (@Markers.split Prop
                                         (and
                                            (forall _ : not (@eq Z (@word.unsigned (@width parameters) (@word parameters) br) Z0),
                                             @WeakestPrecondition.cmd parameters (@WeakestPrecondition.call parameters functions) c1 t0 m0 localsmap
                                               (fun (t' : @trace parameters) (m' : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (localsmap' : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) =>
                                                @Markers.unique Prop
                                                  (@Markers.left Prop
                                                     (@ex (@word.rep (@width parameters) (@word parameters))
                                                        (fun x4 : @word.rep (@width parameters) (@word parameters) =>
                                                         @ex (@word.rep (@width parameters) (@word parameters))
                                                           (fun x5 : @word.rep (@width parameters) (@word parameters) =>
                                                            @ex (@word.rep (@width parameters) (@word parameters))
                                                              (fun x6 : @word.rep (@width parameters) (@word parameters) =>
                                                               @Markers.split Prop
                                                                 (and
                                                                    (@enforce parameters
                                                                       (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                                                          (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))
                                                                       (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit))) x4 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit)) x5 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit) x6 tt))) localsmap')
                                                                    (@Markers.right Prop
                                                                       (@Markers.unique Prop
                                                                          (@Markers.left Prop
                                                                             (@ex (list (@word.rep (@width parameters) (@word parameters)))
                                                                                (fun x7 : list (@word.rep (@width parameters) (@word parameters)) =>
                                                                                 @ex (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                   (fun x8 : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop =>
                                                                                    @ex nat
                                                                                      (fun v' : nat =>
                                                                                       @Markers.split Prop
                                                                                         (and (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 m') (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x5 x4)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7) v')))
                                                                                            (@Markers.right Prop
                                                                                               (@Markers.split Prop
                                                                                                  (and (lt v' v)
                                                                                                     (forall (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : and (@eq (@trace parameters) T t') (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 M)),
                                                                                                      and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 M)))))))))))))))))))))
                                            (forall _ : @eq Z (@word.unsigned (@width parameters) (@word parameters) br) Z0, and (@eq (@trace parameters) t0 t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 m0))))) (swap_swap_ok_subproof m0 x1 x2 x3)
                                   (@conj
                                      (forall _ : not (@eq Z (@word.unsigned (@width parameters) (@word parameters) br) Z0),
                                       @WeakestPrecondition.cmd parameters (@WeakestPrecondition.call parameters functions) c1 t0 m0 localsmap
                                         (fun (t' : @trace parameters) (m' : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (localsmap' : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) =>
                                          @Markers.unique Prop
                                            (@Markers.left Prop
                                               (@ex (@word.rep (@width parameters) (@word parameters))
                                                  (fun x4 : @word.rep (@width parameters) (@word parameters) =>
                                                   @ex (@word.rep (@width parameters) (@word parameters))
                                                     (fun x5 : @word.rep (@width parameters) (@word parameters) =>
                                                      @ex (@word.rep (@width parameters) (@word parameters))
                                                        (fun x6 : @word.rep (@width parameters) (@word parameters) =>
                                                         @Markers.split Prop
                                                           (and
                                                              (@enforce parameters
                                                                 (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                                                    (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))
                                                                 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit))) x4 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit)) x5 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit) x6 tt))) localsmap')
                                                              (@Markers.right Prop
                                                                 (@Markers.unique Prop
                                                                    (@Markers.left Prop
                                                                       (@ex (list (@word.rep (@width parameters) (@word parameters)))
                                                                          (fun x7 : list (@word.rep (@width parameters) (@word parameters)) =>
                                                                           @ex (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                             (fun x8 : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop =>
                                                                              @ex nat
                                                                                (fun v' : nat =>
                                                                                 @Markers.split Prop
                                                                                   (and (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 m') (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x5 x4)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7) v')))
                                                                                      (@Markers.right Prop
                                                                                         (@Markers.split Prop
                                                                                            (and (lt v' v)
                                                                                               (forall (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : and (@eq (@trace parameters) T t') (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 M)),
                                                                                                and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 M)))))))))))))))))))))
                                      (forall _ : @eq Z (@word.unsigned (@width parameters) (@word parameters) br) Z0, and (@eq (@trace parameters) t0 t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 m0))
                                      (fun _ : not (@eq Z (@word.unsigned (@width parameters) (@word parameters) br) Z0) =>
                                       ((let v0 : @word.rep (@width parameters) (@word parameters) := @word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH)))) : @word.rep (@width parameters) (@word parameters) in
                                         @ex_intro (@word.rep (@width parameters) (@word parameters))
                                           (fun v1 : @word.rep (@width parameters) (@word parameters) =>
                                            and
                                              (@WeakestPrecondition.dexpr parameters m0 localsmap
                                                 (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.add (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))
                                                    (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.slu
                                                       (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sru (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sub (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))
                                                          (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH))))) (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH))))) v1)
                                              (@dlet.dlet (@map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) (fun _ : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) => Prop) (@map.put (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) localsmap (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString))) v1)
                                                 (fun l0 : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) =>
                                                  @WeakestPrecondition.cmd parameters (@WeakestPrecondition.call parameters functions) c0 t0 m0 l0
                                                    (fun (t' : @trace parameters) (m' : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (localsmap' : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) =>
                                                     @Markers.unique Prop
                                                       (@Markers.left Prop
                                                          (@ex (@word.rep (@width parameters) (@word parameters))
                                                             (fun x4 : @word.rep (@width parameters) (@word parameters) =>
                                                              @ex (@word.rep (@width parameters) (@word parameters))
                                                                (fun x5 : @word.rep (@width parameters) (@word parameters) =>
                                                                 @ex (@word.rep (@width parameters) (@word parameters))
                                                                   (fun x6 : @word.rep (@width parameters) (@word parameters) =>
                                                                    @Markers.split Prop
                                                                      (and
                                                                         (@enforce parameters
                                                                            (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                                                               (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))
                                                                            (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit))) x4 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit)) x5 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit) x6 tt))) localsmap')
                                                                         (@Markers.right Prop
                                                                            (@Markers.unique Prop
                                                                               (@Markers.left Prop
                                                                                  (@ex (list (@word.rep (@width parameters) (@word parameters)))
                                                                                     (fun x7 : list (@word.rep (@width parameters) (@word parameters)) =>
                                                                                      @ex (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                        (fun x8 : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop =>
                                                                                         @ex nat
                                                                                           (fun v' : nat =>
                                                                                            @Markers.split Prop
                                                                                              (and (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 m') (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x5 x4)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7) v')))
                                                                                                 (@Markers.right Prop
                                                                                                    (@Markers.split Prop
                                                                                                       (and (lt v' v)
                                                                                                          (forall (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : and (@eq (@trace parameters) T t') (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 M)),
                                                                                                           and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 M))))))))))))))))))))))) v0
                                           (@conj
                                              (@WeakestPrecondition.dexpr parameters m0 localsmap
                                                 (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.add (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))
                                                    (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.slu
                                                       (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sru (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sub (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))
                                                          (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH))))) (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH))))) v0)
                                              (@dlet.dlet (@map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) (fun _ : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) => Prop) (@map.put (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) localsmap (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString))) v0)
                                                 (fun l0 : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) =>
                                                  @WeakestPrecondition.cmd parameters (@WeakestPrecondition.call parameters functions) c0 t0 m0 l0
                                                    (fun (t' : @trace parameters) (m' : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (localsmap' : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) =>
                                                     @Markers.unique Prop
                                                       (@Markers.left Prop
                                                          (@ex (@word.rep (@width parameters) (@word parameters))
                                                             (fun x4 : @word.rep (@width parameters) (@word parameters) =>
                                                              @ex (@word.rep (@width parameters) (@word parameters))
                                                                (fun x5 : @word.rep (@width parameters) (@word parameters) =>
                                                                 @ex (@word.rep (@width parameters) (@word parameters))
                                                                   (fun x6 : @word.rep (@width parameters) (@word parameters) =>
                                                                    @Markers.split Prop
                                                                      (and
                                                                         (@enforce parameters
                                                                            (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                                                               (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))
                                                                            (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit))) x4 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit)) x5 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit) x6 tt))) localsmap')
                                                                         (@Markers.right Prop
                                                                            (@Markers.unique Prop
                                                                               (@Markers.left Prop
                                                                                  (@ex (list (@word.rep (@width parameters) (@word parameters)))
                                                                                     (fun x7 : list (@word.rep (@width parameters) (@word parameters)) =>
                                                                                      @ex (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                        (fun x8 : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop =>
                                                                                         @ex nat
                                                                                           (fun v' : nat =>
                                                                                            @Markers.split Prop
                                                                                              (and (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 m') (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x5 x4)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7) v')))
                                                                                                 (@Markers.right Prop
                                                                                                    (@Markers.split Prop
                                                                                                       (and (lt v' v)
                                                                                                          (forall (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : and (@eq (@trace parameters) T t') (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 M)),
                                                                                                           and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 M))))))))))))))))))))))
                                              ((((((let v1 : @word.rep (@width parameters) (@word parameters) := x1 : @word.rep (@width parameters) (@word parameters) in
                                                    @ex_intro (@word.rep (@width parameters) (@word parameters))
                                                      (fun v2 : @word.rep (@width parameters) (@word parameters) =>
                                                       and (@eq (option (@word.rep (@width parameters) (@word parameters))) (@map.get (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) localsmap (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@Some (@word.rep (@width parameters) (@word parameters)) v2))
                                                         (@WeakestPrecondition.expr parameters m0 localsmap
                                                            (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.slu
                                                               (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sru (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sub (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))
                                                                  (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH))))) (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH)))) (fun v3 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v0 (@word.add (@width parameters) (@word parameters) v2 v3)))) v1
                                                      (@conj (@eq (option (@word.rep (@width parameters) (@word parameters))) (@map.get (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) localsmap (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@Some (@word.rep (@width parameters) (@word parameters)) v1))
                                                         (@WeakestPrecondition.expr parameters m0 localsmap
                                                            (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.slu
                                                               (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sru (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sub (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))
                                                                  (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH))))) (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH)))) (fun v2 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v0 (@word.add (@width parameters) (@word parameters) v1 v2))) (@eq_refl (option (@word.rep (@width parameters) (@word parameters))) (@map.get (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) localsmap (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))
                                                         (((((((((let v2 : @word.rep (@width parameters) (@word parameters) := x2 : @word.rep (@width parameters) (@word parameters) in
                                                                  @ex_intro (@word.rep (@width parameters) (@word parameters))
                                                                    (fun v3 : @word.rep (@width parameters) (@word parameters) =>
                                                                     and (@eq (option (@word.rep (@width parameters) (@word parameters))) (@map.get (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) localsmap (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@Some (@word.rep (@width parameters) (@word parameters)) v3))
                                                                       (@WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))
                                                                          (fun v4 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH)))) (fun v5 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH))) (fun v6 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v0 (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) v3 v4) v5) v6))))))) v2
                                                                    (@conj (@eq (option (@word.rep (@width parameters) (@word parameters))) (@map.get (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) localsmap (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@Some (@word.rep (@width parameters) (@word parameters)) v2))
                                                                       (@WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))
                                                                          (fun v3 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH)))) (fun v4 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH))) (fun v5 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v0 (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) v2 v3) v4) v5))))))
                                                                       (@eq_refl (option (@word.rep (@width parameters) (@word parameters))) (@map.get (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) localsmap (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))))
                                                                       (((let v3 : @word.rep (@width parameters) (@word parameters) := x1 : @word.rep (@width parameters) (@word parameters) in
                                                                          @ex_intro (@word.rep (@width parameters) (@word parameters))
                                                                            (fun v4 : @word.rep (@width parameters) (@word parameters) =>
                                                                             and (@eq (option (@word.rep (@width parameters) (@word parameters))) (@map.get (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) localsmap (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@Some (@word.rep (@width parameters) (@word parameters)) v4))
                                                                               (@WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH)))) (fun v5 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH))) (fun v6 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v0 (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 v4) v5) v6)))))) v3
                                                                            (@conj (@eq (option (@word.rep (@width parameters) (@word parameters))) (@map.get (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) localsmap (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@Some (@word.rep (@width parameters) (@word parameters)) v3))
                                                                               (@WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH)))) (fun v4 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH))) (fun v5 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v0 (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 v3) v4) v5)))))
                                                                               (@eq_refl (option (@word.rep (@width parameters) (@word parameters))) (@map.get (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) localsmap (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))
                                                                               (((let v4 : @word.rep (@width parameters) (@word parameters) := @word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))) in
                                                                                  ((let v5 : @word.rep (@width parameters) (@word parameters) := @word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH)) in @eq_refl (@word.rep (@width parameters) (@word parameters)) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))))
                                                                                   :
                                                                                   @WeakestPrecondition.literal parameters (Zpos (xI xH)) (fun v5 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v0 (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) v4) v5))))
                                                                                  :
                                                                                  @WeakestPrecondition.expr_body parameters m0 localsmap (@WeakestPrecondition.expr parameters m0 localsmap) (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH))) (fun v5 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v0 (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) v4) v5))))
                                                                                 :
                                                                                 @WeakestPrecondition.literal parameters (Zpos (xO (xO xH))) (fun v4 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH))) (fun v5 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v0 (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) v4) v5)))))
                                                                                :
                                                                                @WeakestPrecondition.expr_body parameters m0 localsmap (@WeakestPrecondition.expr parameters m0 localsmap) (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH)))) (fun v4 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH))) (fun v5 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v0 (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 (x1 : @word.rep (@width parameters) (@word parameters))) v4) v5)))))
                                                                             :
                                                                             (fun v4 : @word.rep (@width parameters) (@word parameters) =>
                                                                              and (@eq (option (@word.rep (@width parameters) (@word parameters))) (@map.get (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) localsmap (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@Some (@word.rep (@width parameters) (@word parameters)) v4))
                                                                                (@WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH)))) (fun v5 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH))) (fun v6 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v0 (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 v4) v5) v6)))))) v3))
                                                                         :
                                                                         @WeakestPrecondition.get parameters localsmap (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                                                           (fun v3 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH)))) (fun v4 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH))) (fun v5 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v0 (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 v3) v4) v5))))))
                                                                        :
                                                                        @WeakestPrecondition.expr_body parameters m0 localsmap (@WeakestPrecondition.expr parameters m0 localsmap) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))
                                                                          (fun v3 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH)))) (fun v4 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH))) (fun v5 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v0 (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (x2 : @word.rep (@width parameters) (@word parameters)) v3) v4) v5))))))
                                                                     :
                                                                     (fun v3 : @word.rep (@width parameters) (@word parameters) =>
                                                                      and (@eq (option (@word.rep (@width parameters) (@word parameters))) (@map.get (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) localsmap (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@Some (@word.rep (@width parameters) (@word parameters)) v3))
                                                                        (@WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))
                                                                           (fun v4 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH)))) (fun v5 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH))) (fun v6 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v0 (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) v3 v4) v5) v6))))))) v2))
                                                                 :
                                                                 @WeakestPrecondition.get parameters localsmap (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))
                                                                   (fun v2 : @word.rep (@width parameters) (@word parameters) =>
                                                                    @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))
                                                                      (fun v3 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH)))) (fun v4 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH))) (fun v5 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v0 (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) v2 v3) v4) v5)))))))
                                                                :
                                                                @WeakestPrecondition.expr_body parameters m0 localsmap (@WeakestPrecondition.expr parameters m0 localsmap) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))
                                                                  (fun v2 : @word.rep (@width parameters) (@word parameters) =>
                                                                   @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))
                                                                     (fun v3 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH)))) (fun v4 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH))) (fun v5 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v0 (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) v2 v3) v4) v5)))))))
                                                               :
                                                               @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))
                                                                 (fun v2 : @word.rep (@width parameters) (@word parameters) =>
                                                                  @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))
                                                                    (fun v3 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH)))) (fun v4 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH))) (fun v5 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v0 (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@interp_binop (@width parameters) (@word parameters) Syntax.bopname.sub v2 v3) v4) v5)))))))
                                                              :
                                                              @WeakestPrecondition.expr_body parameters m0 localsmap (@WeakestPrecondition.expr parameters m0 localsmap)
                                                                (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sub (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))
                                                                (fun v2 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH)))) (fun v3 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH))) (fun v4 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v0 (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) v2 v3) v4))))))
                                                             :
                                                             @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sub (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))
                                                               (fun v2 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH)))) (fun v3 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH))) (fun v4 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v0 (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@interp_binop (@width parameters) (@word parameters) Syntax.bopname.sru v2 v3) v4))))))
                                                            :
                                                            @WeakestPrecondition.expr_body parameters m0 localsmap (@WeakestPrecondition.expr parameters m0 localsmap)
                                                              (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sru (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sub (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))
                                                                 (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH))))) (fun v2 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH))) (fun v3 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v0 (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) v2 v3)))))
                                                           :
                                                           @WeakestPrecondition.expr parameters m0 localsmap
                                                             (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sru (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sub (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))
                                                                (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH))))) (fun v2 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH))) (fun v3 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v0 (@word.add (@width parameters) (@word parameters) x1 (@interp_binop (@width parameters) (@word parameters) Syntax.bopname.slu v2 v3)))))
                                                          :
                                                          @WeakestPrecondition.expr_body parameters m0 localsmap (@WeakestPrecondition.expr parameters m0 localsmap)
                                                            (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.slu
                                                               (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sru (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sub (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))
                                                                  (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH))))) (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH)))) (fun v2 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v0 (@word.add (@width parameters) (@word parameters) (x1 : @word.rep (@width parameters) (@word parameters)) v2)))
                                                       :
                                                       (fun v2 : @word.rep (@width parameters) (@word parameters) =>
                                                        and (@eq (option (@word.rep (@width parameters) (@word parameters))) (@map.get (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) localsmap (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@Some (@word.rep (@width parameters) (@word parameters)) v2))
                                                          (@WeakestPrecondition.expr parameters m0 localsmap
                                                             (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.slu
                                                                (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sru (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sub (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))
                                                                   (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH))))) (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH)))) (fun v3 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v0 (@word.add (@width parameters) (@word parameters) v2 v3)))) v1))
                                                   :
                                                   @WeakestPrecondition.get parameters localsmap (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                                     (fun v1 : @word.rep (@width parameters) (@word parameters) =>
                                                      @WeakestPrecondition.expr parameters m0 localsmap
                                                        (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.slu
                                                           (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sru (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sub (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))
                                                              (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH))))) (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH)))) (fun v2 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v0 (@word.add (@width parameters) (@word parameters) v1 v2))))
                                                  :
                                                  @WeakestPrecondition.expr_body parameters m0 localsmap (@WeakestPrecondition.expr parameters m0 localsmap) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))
                                                    (fun v1 : @word.rep (@width parameters) (@word parameters) =>
                                                     @WeakestPrecondition.expr parameters m0 localsmap
                                                       (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.slu
                                                          (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sru (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sub (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))
                                                             (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH))))) (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH)))) (fun v2 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v0 (@word.add (@width parameters) (@word parameters) v1 v2))))
                                                 :
                                                 @WeakestPrecondition.expr parameters m0 localsmap (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))
                                                   (fun v1 : @word.rep (@width parameters) (@word parameters) =>
                                                    @WeakestPrecondition.expr parameters m0 localsmap
                                                      (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.slu
                                                         (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sru (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sub (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))
                                                            (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH))))) (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH)))) (fun v2 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v0 (@interp_binop (@width parameters) (@word parameters) Syntax.bopname.add v1 v2))))
                                                :
                                                @WeakestPrecondition.expr_body parameters m0 localsmap (@WeakestPrecondition.expr parameters m0 localsmap)
                                                  (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.add (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))
                                                     (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.slu
                                                        (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sru (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sub (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))
                                                           (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH))))) (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH))))) (@eq (@word.rep (@width parameters) (@word parameters)) v0))
                                               :
                                               @WeakestPrecondition.dexpr parameters m0 localsmap
                                                 (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.add (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))
                                                    (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.slu
                                                       (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sru (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.sub (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))
                                                          (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO xH))))) (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xI xH))))) v0)
                                              (let l0 : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) := @map.put (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) localsmap (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString))) v0 in
                                               (let H8 :
                                                  @Lift1Prop.iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0)
                                                    (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0) :=
                                                  @SeparationLogic.Tree.iff1_to_sep_of_iff1_flatten (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) mapok
                                                    (@SeparationLogic.Tree.Node (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x)) (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) x0))
                                                    (@SeparationLogic.Tree.Node (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x)) (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) x0))
                                                    ((@RelationClasses.reflexivity (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@Lift1Prop.iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters))) (@RelationClasses.Equivalence_Reflexive (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@Lift1Prop.iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters))) (Lift1Prop.Equivalence_iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters))))
                                                        (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0)
                                                      :
                                                      @Lift1Prop.iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters))
                                                        (@seps (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                           (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) x0 (@nil (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)))))
                                                        (@seps (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                           (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) x0 (@nil (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop))))))
                                                     :
                                                     @Lift1Prop.iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters))
                                                       (@seps (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                          (@SeparationLogic.Tree.flatten (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                             (@SeparationLogic.Tree.Node (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x)) (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) x0))))
                                                       (@seps (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                          (@SeparationLogic.Tree.flatten (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                             (@SeparationLogic.Tree.Node (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x)) (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) x0))))) in
                                                let H10 :
                                                  @sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                    (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                       (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1
                                                          (@List.firstn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x))
                                                       (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                          (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH)))))
                                                             (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                          end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x)))
                                                          (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                             (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))) x)))) x0 m0 :=
                                                  @proj1
                                                    (forall _ : @sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 m0,
                                                     @sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                       (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                          (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1
                                                             (@List.firstn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x))
                                                          (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                             (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH)))))
                                                                (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                             end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x)))
                                                             (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))) x)))) x0 m0)
                                                    (forall
                                                       _ : @sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                             (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1
                                                                   (@List.firstn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x))
                                                                (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                   (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH)))))
                                                                      (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                   end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x)))
                                                                   (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                      (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))) x)))) x0 m0,
                                                     @sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 m0)
                                                    (@SeparationLogic.Proper_sep_iff1 (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) mapok (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x)
                                                       (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                          (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1
                                                             (@List.firstn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x))
                                                          (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                             (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH)))))
                                                                (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                             end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x)))
                                                             (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))) x))))
                                                       (@array_address_inbounds (@width parameters) (@word parameters) wordok (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) mapok (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                                                                                                    end x x1 (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH)))))
                                                          match proof_admitted return (Z.lt (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (Z.mul (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x)))) with
                                                          end match proof_admitted return (@eq Z (Z.modulo (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))) Z0) with
                                                              end (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))
                                                          (@eq_refl nat (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))))) x0 x0
                                                       (@RelationClasses.reflexivity (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@Lift1Prop.iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters))) (@RelationClasses.Equivalence_Reflexive (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@Lift1Prop.iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters))) (Lift1Prop.Equivalence_iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)))) x0) m0)
                                                    (@proj1
                                                       (forall _ : @sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 m0,
                                                        @sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 m0)
                                                       (forall _ : @sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 m0,
                                                        @sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 m0) (H8 m0) H3) in
                                                (let v1 : @word.rep (@width parameters) (@word parameters) :=
                                                   match
                                                     @word.ltu (@width parameters) (@word parameters) (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                   end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x) : @word.rep (@width parameters) (@word parameters)) (x3 : @word.rep (@width parameters) (@word parameters))
                                                     return (@word.rep (@width parameters) (@word parameters))
                                                   with
                                                   | true => @word.of_Z (@width parameters) (@word parameters) (Zpos xH)
                                                   | false => @word.of_Z (@width parameters) (@word parameters) Z0
                                                   end in
                                                 @ex_intro (@word.rep (@width parameters) (@word parameters))
                                                   (fun v2 : @word.rep (@width parameters) (@word parameters) =>
                                                    and
                                                      (@WeakestPrecondition.dexpr parameters m0 l0
                                                         (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.ltu (@Syntax.expr.load (Syntax.Build_parameters string string string) Syntax.access_size.word (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))))) v2)
                                                      (and
                                                         (forall _ : not (@eq Z (@word.unsigned (@width parameters) (@word parameters) v2) Z0),
                                                          @WeakestPrecondition.cmd parameters (@WeakestPrecondition.call parameters functions) (@Syntax.cmd.set (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))) (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.add (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))) (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO (xO xH))))))) t0 m0 l0
                                                            (fun (t1 : @trace parameters) (m1 : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (l1 : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) =>
                                                             @WeakestPrecondition.cmd parameters (@WeakestPrecondition.call parameters functions) (@Syntax.cmd.unset (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))) t1 m1 l1
                                                               (fun (t' : @trace parameters) (m' : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (localsmap' : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) =>
                                                                @Markers.unique Prop
                                                                  (@Markers.left Prop
                                                                     (@ex (@word.rep (@width parameters) (@word parameters))
                                                                        (fun x4 : @word.rep (@width parameters) (@word parameters) =>
                                                                         @ex (@word.rep (@width parameters) (@word parameters))
                                                                           (fun x5 : @word.rep (@width parameters) (@word parameters) =>
                                                                            @ex (@word.rep (@width parameters) (@word parameters))
                                                                              (fun x6 : @word.rep (@width parameters) (@word parameters) =>
                                                                               @Markers.split Prop
                                                                                 (and
                                                                                    (@enforce parameters
                                                                                       (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                                                                          (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))
                                                                                       (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit))) x4 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit)) x5 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit) x6 tt))) localsmap')
                                                                                    (@Markers.right Prop
                                                                                       (@Markers.unique Prop
                                                                                          (@Markers.left Prop
                                                                                             (@ex (list (@word.rep (@width parameters) (@word parameters)))
                                                                                                (fun x7 : list (@word.rep (@width parameters) (@word parameters)) =>
                                                                                                 @ex (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                   (fun x8 : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop =>
                                                                                                    @ex nat
                                                                                                      (fun v' : nat =>
                                                                                                       @Markers.split Prop
                                                                                                         (and (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 m') (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x5 x4)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7) v')))
                                                                                                            (@Markers.right Prop
                                                                                                               (@Markers.split Prop
                                                                                                                  (and (lt v' v)
                                                                                                                     (forall (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : and (@eq (@trace parameters) T t') (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 M)),
                                                                                                                      and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 M))))))))))))))))))))))
                                                         (forall _ : @eq Z (@word.unsigned (@width parameters) (@word parameters) v2) Z0,
                                                          @WeakestPrecondition.cmd parameters (@WeakestPrecondition.call parameters functions) (@Syntax.cmd.set (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString))))) t0 m0 l0
                                                            (fun (t1 : @trace parameters) (m1 : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (l1 : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) =>
                                                             @WeakestPrecondition.cmd parameters (@WeakestPrecondition.call parameters functions) (@Syntax.cmd.unset (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))) t1 m1 l1
                                                               (fun (t' : @trace parameters) (m' : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (localsmap' : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) =>
                                                                @Markers.unique Prop
                                                                  (@Markers.left Prop
                                                                     (@ex (@word.rep (@width parameters) (@word parameters))
                                                                        (fun x4 : @word.rep (@width parameters) (@word parameters) =>
                                                                         @ex (@word.rep (@width parameters) (@word parameters))
                                                                           (fun x5 : @word.rep (@width parameters) (@word parameters) =>
                                                                            @ex (@word.rep (@width parameters) (@word parameters))
                                                                              (fun x6 : @word.rep (@width parameters) (@word parameters) =>
                                                                               @Markers.split Prop
                                                                                 (and
                                                                                    (@enforce parameters
                                                                                       (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                                                                          (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))
                                                                                       (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit))) x4 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit)) x5 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit) x6 tt))) localsmap')
                                                                                    (@Markers.right Prop
                                                                                       (@Markers.unique Prop
                                                                                          (@Markers.left Prop
                                                                                             (@ex (list (@word.rep (@width parameters) (@word parameters)))
                                                                                                (fun x7 : list (@word.rep (@width parameters) (@word parameters)) =>
                                                                                                 @ex (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                   (fun x8 : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop =>
                                                                                                    @ex nat
                                                                                                      (fun v' : nat =>
                                                                                                       @Markers.split Prop
                                                                                                         (and (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 m') (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x5 x4)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7) v')))
                                                                                                            (@Markers.right Prop
                                                                                                               (@Markers.split Prop
                                                                                                                  (and (lt v' v)
                                                                                                                     (forall (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : and (@eq (@trace parameters) T t') (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 M)),
                                                                                                                      and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 M)))))))))))))))))))))))) v1
                                                   (@conj
                                                      (@WeakestPrecondition.dexpr parameters m0 l0
                                                         (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.ltu (@Syntax.expr.load (Syntax.Build_parameters string string string) Syntax.access_size.word (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))))) v1)
                                                      (and
                                                         (forall _ : not (@eq Z (@word.unsigned (@width parameters) (@word parameters) v1) Z0),
                                                          @WeakestPrecondition.cmd parameters (@WeakestPrecondition.call parameters functions) (@Syntax.cmd.set (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))) (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.add (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))) (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO (xO xH))))))) t0 m0 l0
                                                            (fun (t1 : @trace parameters) (m1 : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (l1 : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) =>
                                                             @WeakestPrecondition.cmd parameters (@WeakestPrecondition.call parameters functions) (@Syntax.cmd.unset (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))) t1 m1 l1
                                                               (fun (t' : @trace parameters) (m' : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (localsmap' : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) =>
                                                                @Markers.unique Prop
                                                                  (@Markers.left Prop
                                                                     (@ex (@word.rep (@width parameters) (@word parameters))
                                                                        (fun x4 : @word.rep (@width parameters) (@word parameters) =>
                                                                         @ex (@word.rep (@width parameters) (@word parameters))
                                                                           (fun x5 : @word.rep (@width parameters) (@word parameters) =>
                                                                            @ex (@word.rep (@width parameters) (@word parameters))
                                                                              (fun x6 : @word.rep (@width parameters) (@word parameters) =>
                                                                               @Markers.split Prop
                                                                                 (and
                                                                                    (@enforce parameters
                                                                                       (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                                                                          (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))
                                                                                       (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit))) x4 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit)) x5 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit) x6 tt))) localsmap')
                                                                                    (@Markers.right Prop
                                                                                       (@Markers.unique Prop
                                                                                          (@Markers.left Prop
                                                                                             (@ex (list (@word.rep (@width parameters) (@word parameters)))
                                                                                                (fun x7 : list (@word.rep (@width parameters) (@word parameters)) =>
                                                                                                 @ex (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                   (fun x8 : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop =>
                                                                                                    @ex nat
                                                                                                      (fun v' : nat =>
                                                                                                       @Markers.split Prop
                                                                                                         (and (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 m') (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x5 x4)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7) v')))
                                                                                                            (@Markers.right Prop
                                                                                                               (@Markers.split Prop
                                                                                                                  (and (lt v' v)
                                                                                                                     (forall (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : and (@eq (@trace parameters) T t') (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 M)),
                                                                                                                      and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 M))))))))))))))))))))))
                                                         (forall _ : @eq Z (@word.unsigned (@width parameters) (@word parameters) v1) Z0,
                                                          @WeakestPrecondition.cmd parameters (@WeakestPrecondition.call parameters functions) (@Syntax.cmd.set (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString))))) t0 m0 l0
                                                            (fun (t1 : @trace parameters) (m1 : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (l1 : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) =>
                                                             @WeakestPrecondition.cmd parameters (@WeakestPrecondition.call parameters functions) (@Syntax.cmd.unset (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))) t1 m1 l1
                                                               (fun (t' : @trace parameters) (m' : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (localsmap' : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) =>
                                                                @Markers.unique Prop
                                                                  (@Markers.left Prop
                                                                     (@ex (@word.rep (@width parameters) (@word parameters))
                                                                        (fun x4 : @word.rep (@width parameters) (@word parameters) =>
                                                                         @ex (@word.rep (@width parameters) (@word parameters))
                                                                           (fun x5 : @word.rep (@width parameters) (@word parameters) =>
                                                                            @ex (@word.rep (@width parameters) (@word parameters))
                                                                              (fun x6 : @word.rep (@width parameters) (@word parameters) =>
                                                                               @Markers.split Prop
                                                                                 (and
                                                                                    (@enforce parameters
                                                                                       (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                                                                          (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))
                                                                                       (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit))) x4 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit)) x5 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit) x6 tt))) localsmap')
                                                                                    (@Markers.right Prop
                                                                                       (@Markers.unique Prop
                                                                                          (@Markers.left Prop
                                                                                             (@ex (list (@word.rep (@width parameters) (@word parameters)))
                                                                                                (fun x7 : list (@word.rep (@width parameters) (@word parameters)) =>
                                                                                                 @ex (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                   (fun x8 : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop =>
                                                                                                    @ex nat
                                                                                                      (fun v' : nat =>
                                                                                                       @Markers.split Prop
                                                                                                         (and (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 m') (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x5 x4)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7) v')))
                                                                                                            (@Markers.right Prop
                                                                                                               (@Markers.split Prop
                                                                                                                  (and (lt v' v)
                                                                                                                     (forall (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : and (@eq (@trace parameters) T t') (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 M)),
                                                                                                                      and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 M)))))))))))))))))))))))
                                                      (((((((let v2 : @word.rep (@width parameters) (@word parameters) := @word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH)))) : @word.rep (@width parameters) (@word parameters) in
                                                             @ex_intro (@word.rep (@width parameters) (@word parameters))
                                                               (fun v3 : @word.rep (@width parameters) (@word parameters) =>
                                                                and (@eq (option (@word.rep (@width parameters) (@word parameters))) (@map.get (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) l0 (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))) (@Some (@word.rep (@width parameters) (@word parameters)) v3))
                                                                  (@WeakestPrecondition.load parameters Syntax.access_size.word m0 v3
                                                                     (fun v4 : @word.rep (@width parameters) (@word parameters) =>
                                                                      @WeakestPrecondition.expr parameters m0 l0 (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))) (fun v5 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v1 match @word.ltu (@width parameters) (@word parameters) v4 v5 return (@word.rep (@width parameters) (@word parameters)) with
| true => @word.of_Z (@width parameters) (@word parameters) (Zpos xH)
| false => @word.of_Z (@width parameters) (@word parameters) Z0
end)))) v2
                                                               (@conj (@eq (option (@word.rep (@width parameters) (@word parameters))) (@map.get (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) l0 (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))) (@Some (@word.rep (@width parameters) (@word parameters)) v2))
                                                                  (@WeakestPrecondition.load parameters Syntax.access_size.word m0 v2
                                                                     (fun v3 : @word.rep (@width parameters) (@word parameters) =>
                                                                      @WeakestPrecondition.expr parameters m0 l0 (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))) (fun v4 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v1 match @word.ltu (@width parameters) (@word parameters) v3 v4 return (@word.rep (@width parameters) (@word parameters)) with
| true => @word.of_Z (@width parameters) (@word parameters) (Zpos xH)
| false => @word.of_Z (@width parameters) (@word parameters) Z0
end)))
                                                                  (@eq_refl (option (@word.rep (@width parameters) (@word parameters))) (@map.get (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) l0 (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))))
                                                                  ((let v3 : @word.rep (@width parameters) (@word parameters) :=
                                                                      @List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                  end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x) : @word.rep (@width parameters) (@word parameters) in
                                                                    @ex_intro (@word.rep (@width parameters) (@word parameters))
                                                                      (fun v4 : @word.rep (@width parameters) (@word parameters) =>
                                                                       and (@eq (option (@word.rep (@width parameters) (@word parameters))) (@load (@byte parameters) (@width parameters) (@word parameters) (@mem parameters) Syntax.access_size.word m0 v2) (@Some (@word.rep (@width parameters) (@word parameters)) v4))
                                                                         (@WeakestPrecondition.expr parameters m0 l0 (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))) (fun v5 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v1 match @word.ltu (@width parameters) (@word parameters) v4 v5 return (@word.rep (@width parameters) (@word parameters)) with
| true => @word.of_Z (@width parameters) (@word parameters) (Zpos xH)
| false => @word.of_Z (@width parameters) (@word parameters) Z0
end))) v3
                                                                      (@conj (@eq (option (@word.rep (@width parameters) (@word parameters))) (@load (@byte parameters) (@width parameters) (@word parameters) (@mem parameters) Syntax.access_size.word m0 v2) (@Some (@word.rep (@width parameters) (@word parameters)) v3))
                                                                         (@WeakestPrecondition.expr parameters m0 l0 (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))) (fun v4 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v1 match @word.ltu (@width parameters) (@word parameters) v3 v4 return (@word.rep (@width parameters) (@word parameters)) with
| true => @word.of_Z (@width parameters) (@word parameters) (Zpos xH)
| false => @word.of_Z (@width parameters) (@word parameters) Z0
end))
                                                                         (@load_word_of_sep (@width parameters) (@word parameters) wordok (@byte parameters) byteok (@mem parameters) mapok v2
                                                                            (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                         end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x))
                                                                            (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                               (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1
                                                                                  (@List.firstn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x))
                                                                               (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                  (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                     (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))) x)) x0)) m0
                                                                            (Lift1Prop.subrelation_iff1_impl1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters))
                                                                               (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                  (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                     (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1
                                                                                        (@List.firstn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x))
                                                                                     (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                        (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH)))))
                                                                                           (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                        end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x)))
                                                                                        (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                           (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))) x)))) x0)
                                                                               (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                  (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) v2
                                                                                     (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                  end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x)))
                                                                                  (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                     (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1
                                                                                        (@List.firstn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x))
                                                                                     (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                        (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                           (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))) x)) x0)))
                                                                               (@SeparationLogic.Tree.iff1_to_sep_of_iff1_flatten (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) mapok
                                                                                  (@SeparationLogic.Tree.Node (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                     (@SeparationLogic.Tree.Node (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                        (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                           (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1
                                                                                              (@List.firstn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x)))
                                                                                        (@SeparationLogic.Tree.Node (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                           (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                              (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH)))))
                                                                                                 (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                              end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x))))
                                                                                           (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                              (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                 (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))) x))))) (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) x0))
                                                                                  (@SeparationLogic.Tree.Node (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                     (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                        (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) v2
                                                                                           (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                        end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x))))
                                                                                     (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                        (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                           (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1
                                                                                              (@List.firstn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x))
                                                                                           (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                              (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                 (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))) x)) x0))))
                                                                                  (@SeparationLogic.cancel_seps_at_indices (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) mapok (S O) O
                                                                                     (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                        (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1
                                                                                           (@List.firstn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x))
                                                                                        (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                           (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH)))))
                                                                                              (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                           end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x)))
                                                                                           (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                              (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                 (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))) x))
                                                                                              (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) x0 (@nil (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop))))))
                                                                                     (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                        (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) v2
                                                                                           (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                        end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x)))
                                                                                        (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                           (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                              (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1
                                                                                                 (@List.firstn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x))
                                                                                              (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                 (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                    (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))) x)) x0)) (@nil (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop))))
                                                                                     (@RelationClasses.reflexivity (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@Lift1Prop.iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters))) (@RelationClasses.Equivalence_Reflexive (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@Lift1Prop.iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters))) (Lift1Prop.Equivalence_iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters))))
                                                                                        (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH)))))
                                                                                           (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                        end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x)))
                                                                                      :
                                                                                      @Lift1Prop.iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters))
                                                                                        ((fun (n : nat) (xs0 : list (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)) => @SeparationLogic.hd (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@emp (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) True) (@SeparationLogic.skipn (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) n xs0)) (S O)
                                                                                           (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                              (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1
                                                                                                 (@List.firstn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x))
                                                                                              (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                 (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH)))))
                                                                                                    (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                 end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x)))
                                                                                                 (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                    (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                       (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))) x))
                                                                                                    (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) x0 (@nil (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)))))))
                                                                                        ((fun (n : nat) (xs0 : list (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)) => @SeparationLogic.hd (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@emp (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) True) (@SeparationLogic.skipn (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) n xs0)) O
                                                                                           (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                              (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) v2
                                                                                                 (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                              end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x)))
                                                                                              (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                 (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                    (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1
                                                                                                       (@List.firstn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x))
                                                                                                    (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                       (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                          (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))) x)) x0)) (@nil (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop))))))
                                                                                     ((@RelationClasses.reflexivity (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@Lift1Prop.iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters))) (@RelationClasses.Equivalence_Reflexive (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@Lift1Prop.iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters))) (Lift1Prop.Equivalence_iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters))))
                                                                                         (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                            (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1
                                                                                               (@List.firstn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x))
                                                                                            (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                               (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                  (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))) x)) x0))
                                                                                       :
                                                                                       @Lift1Prop.iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters))
                                                                                         (@seps (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                            (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                               (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1
                                                                                                  (@List.firstn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x))
                                                                                               (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                  (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                     (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))) x))
                                                                                                  (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) x0 (@nil (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop))))))
                                                                                         (@seps (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                            (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                               (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                  (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1
                                                                                                     (@List.firstn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x))
                                                                                                  (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                     (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                        (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))) x)) x0)) (@nil (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)))))
                                                                                      :
                                                                                      @Lift1Prop.iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters))
                                                                                        (@seps (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                           ((fun (n : nat) (xs0 : list (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)) => @SeparationLogic.app (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@SeparationLogic.firstn (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) n xs0) (@SeparationLogic.tl (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@SeparationLogic.skipn (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) n xs0)))
                                                                                              (S O)
                                                                                              (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                 (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1
                                                                                                    (@List.firstn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x))
                                                                                                 (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                    (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH)))))
                                                                                                       (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                    end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x)))
                                                                                                    (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                       (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                          (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))) x))
                                                                                                       (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) x0 (@nil (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop))))))))
                                                                                        (@seps (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                           ((fun (n : nat) (xs0 : list (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)) => @SeparationLogic.app (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@SeparationLogic.firstn (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) n xs0) (@SeparationLogic.tl (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@SeparationLogic.skipn (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) n xs0))) O
                                                                                              (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                 (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) v2
                                                                                                    (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                 end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x)))
                                                                                                 (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                    (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                       (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1
                                                                                                          (@List.firstn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x))
                                                                                                       (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                          (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                             (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))) x)) x0)) (@nil (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)))))))
                                                                                   :
                                                                                   @Lift1Prop.iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters))
                                                                                     (@seps (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                        (@SeparationLogic.Tree.flatten (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                           (@SeparationLogic.Tree.Node (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                              (@SeparationLogic.Tree.Node (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                 (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                    (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1
                                                                                                       (@List.firstn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x)))
                                                                                                 (@SeparationLogic.Tree.Node (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                    (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                       (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH)))))
                                                                                                          (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                       end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x))))
                                                                                                    (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                       (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                          (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))) x))))) (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) x0))))
                                                                                     (@seps (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                        (@SeparationLogic.Tree.flatten (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                           (@SeparationLogic.Tree.Node (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                              (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                 (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) v2
                                                                                                    (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                 end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x))))
                                                                                              (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                 (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                    (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1
                                                                                                       (@List.firstn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x))
                                                                                                    (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                       (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                          (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))) x)) x0)))))))
                                                                                :
                                                                                @Lift1Prop.iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters))
                                                                                  (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                     (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                        (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1
                                                                                           (@List.firstn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x))
                                                                                        (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                           (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH)))))
                                                                                              (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                           end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x)))
                                                                                           (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                              (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))) x)))) x0)
                                                                                  (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                     (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) v2
                                                                                        (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                     end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x)))
                                                                                     (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                        (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1
                                                                                           (@List.firstn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x))
                                                                                        (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                           (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                              (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))) x)) x0)))) m0 H10))
                                                                         (((let v4 : @word.rep (@width parameters) (@word parameters) := x3 : @word.rep (@width parameters) (@word parameters) in
                                                                            @ex_intro (@word.rep (@width parameters) (@word parameters))
                                                                              (fun v5 : @word.rep (@width parameters) (@word parameters) =>
                                                                               and (@eq (option (@word.rep (@width parameters) (@word parameters))) (@map.get (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) l0 (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))) (@Some (@word.rep (@width parameters) (@word parameters)) v5))
                                                                                 (@eq (@word.rep (@width parameters) (@word parameters)) v1 match @word.ltu (@width parameters) (@word parameters) v3 v5 return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                            | true => @word.of_Z (@width parameters) (@word parameters) (Zpos xH)
                                                                                                                                            | false => @word.of_Z (@width parameters) (@word parameters) Z0
                                                                                                                                            end)) v4
                                                                              (@conj (@eq (option (@word.rep (@width parameters) (@word parameters))) (@map.get (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) l0 (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))) (@Some (@word.rep (@width parameters) (@word parameters)) v4))
                                                                                 (@eq (@word.rep (@width parameters) (@word parameters)) v1 match @word.ltu (@width parameters) (@word parameters) v3 v4 return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                            | true => @word.of_Z (@width parameters) (@word parameters) (Zpos xH)
                                                                                                                                            | false => @word.of_Z (@width parameters) (@word parameters) Z0
                                                                                                                                            end) (@eq_refl (option (@word.rep (@width parameters) (@word parameters))) (@map.get (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) l0 (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))))
                                                                                 (@eq_refl (@word.rep (@width parameters) (@word parameters))
                                                                                    match
                                                                                      @word.ltu (@width parameters) (@word parameters)
                                                                                        (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                     end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) x) : @word.rep (@width parameters) (@word parameters)) (x3 : @word.rep (@width parameters) (@word parameters)) return (@word.rep (@width parameters) (@word parameters))
                                                                                    with
                                                                                    | true => @word.of_Z (@width parameters) (@word parameters) (Zpos xH)
                                                                                    | false => @word.of_Z (@width parameters) (@word parameters) Z0
                                                                                    end)
                                                                               :
                                                                               (fun v5 : @word.rep (@width parameters) (@word parameters) =>
                                                                                and (@eq (option (@word.rep (@width parameters) (@word parameters))) (@map.get (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) l0 (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))) (@Some (@word.rep (@width parameters) (@word parameters)) v5))
                                                                                  (@eq (@word.rep (@width parameters) (@word parameters)) v1 match @word.ltu (@width parameters) (@word parameters) v3 v5 return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                             | true => @word.of_Z (@width parameters) (@word parameters) (Zpos xH)
                                                                                                                                             | false => @word.of_Z (@width parameters) (@word parameters) Z0
                                                                                                                                             end)) v4))
                                                                           :
                                                                           @WeakestPrecondition.get parameters l0 (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (fun v4 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v1 match @word.ltu (@width parameters) (@word parameters) v3 v4 return (@word.rep (@width parameters) (@word parameters)) with
| true => @word.of_Z (@width parameters) (@word parameters) (Zpos xH)
| false => @word.of_Z (@width parameters) (@word parameters) Z0
end))
                                                                          :
                                                                          @WeakestPrecondition.expr_body parameters m0 l0 (@WeakestPrecondition.expr parameters m0 l0) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))))
                                                                            (fun v4 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v1 match @word.ltu (@width parameters) (@word parameters) v3 v4 return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                    | true => @word.of_Z (@width parameters) (@word parameters) (Zpos xH)
                                                                                                                                                                                                    | false => @word.of_Z (@width parameters) (@word parameters) Z0
                                                                                                                                                                                                    end))
                                                                       :
                                                                       (fun v4 : @word.rep (@width parameters) (@word parameters) =>
                                                                        and (@eq (option (@word.rep (@width parameters) (@word parameters))) (@load (@byte parameters) (@width parameters) (@word parameters) (@mem parameters) Syntax.access_size.word m0 v2) (@Some (@word.rep (@width parameters) (@word parameters)) v4))
                                                                          (@WeakestPrecondition.expr parameters m0 l0 (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))) (fun v5 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v1 match @word.ltu (@width parameters) (@word parameters) v4 v5 return (@word.rep (@width parameters) (@word parameters)) with
| true => @word.of_Z (@width parameters) (@word parameters) (Zpos xH)
| false => @word.of_Z (@width parameters) (@word parameters) Z0
end))) v3))
                                                                   :
                                                                   @WeakestPrecondition.load parameters Syntax.access_size.word m0 v2
                                                                     (fun v3 : @word.rep (@width parameters) (@word parameters) =>
                                                                      @WeakestPrecondition.expr parameters m0 l0 (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))) (fun v4 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v1 match @word.ltu (@width parameters) (@word parameters) v3 v4 return (@word.rep (@width parameters) (@word parameters)) with
| true => @word.of_Z (@width parameters) (@word parameters) (Zpos xH)
| false => @word.of_Z (@width parameters) (@word parameters) Z0
end)))
                                                                :
                                                                (fun v3 : @word.rep (@width parameters) (@word parameters) =>
                                                                 and (@eq (option (@word.rep (@width parameters) (@word parameters))) (@map.get (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) l0 (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))) (@Some (@word.rep (@width parameters) (@word parameters)) v3))
                                                                   (@WeakestPrecondition.load parameters Syntax.access_size.word m0 v3
                                                                      (fun v4 : @word.rep (@width parameters) (@word parameters) =>
                                                                       @WeakestPrecondition.expr parameters m0 l0 (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))) (fun v5 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v1 match @word.ltu (@width parameters) (@word parameters) v4 v5 return (@word.rep (@width parameters) (@word parameters)) with
| true => @word.of_Z (@width parameters) (@word parameters) (Zpos xH)
| false => @word.of_Z (@width parameters) (@word parameters) Z0
end)))) v2))
                                                            :
                                                            @WeakestPrecondition.get parameters l0 (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))
                                                              (fun a : @word.rep (@width parameters) (@word parameters) =>
                                                               @WeakestPrecondition.load parameters Syntax.access_size.word m0 a
                                                                 (fun v2 : @word.rep (@width parameters) (@word parameters) =>
                                                                  @WeakestPrecondition.expr parameters m0 l0 (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))) (fun v3 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v1 match @word.ltu (@width parameters) (@word parameters) v2 v3 return (@word.rep (@width parameters) (@word parameters)) with
| true => @word.of_Z (@width parameters) (@word parameters) (Zpos xH)
| false => @word.of_Z (@width parameters) (@word parameters) Z0
end))))
                                                           :
                                                           @WeakestPrecondition.expr_body parameters m0 l0 (@WeakestPrecondition.expr parameters m0 l0) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString))))
                                                             (fun a : @word.rep (@width parameters) (@word parameters) =>
                                                              @WeakestPrecondition.load parameters Syntax.access_size.word m0 a
                                                                (fun v2 : @word.rep (@width parameters) (@word parameters) =>
                                                                 @WeakestPrecondition.expr parameters m0 l0 (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))) (fun v3 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v1 match @word.ltu (@width parameters) (@word parameters) v2 v3 return (@word.rep (@width parameters) (@word parameters)) with
| true => @word.of_Z (@width parameters) (@word parameters) (Zpos xH)
| false => @word.of_Z (@width parameters) (@word parameters) Z0
end))))
                                                          :
                                                          @WeakestPrecondition.expr_body parameters m0 l0 (@WeakestPrecondition.expr parameters m0 l0) (@Syntax.expr.load (Syntax.Build_parameters string string string) Syntax.access_size.word (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))))
                                                            (fun v2 : @word.rep (@width parameters) (@word parameters) =>
                                                             @WeakestPrecondition.expr parameters m0 l0 (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))) (fun v3 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v1 match @word.ltu (@width parameters) (@word parameters) v2 v3 return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | true => @word.of_Z (@width parameters) (@word parameters) (Zpos xH)
| false => @word.of_Z (@width parameters) (@word parameters) Z0
end)))
                                                         :
                                                         @WeakestPrecondition.expr parameters m0 l0 (@Syntax.expr.load (Syntax.Build_parameters string string string) Syntax.access_size.word (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))))
                                                           (fun v2 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 l0 (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))) (fun v3 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v1 (@interp_binop (@width parameters) (@word parameters) Syntax.bopname.ltu v2 v3))))
                                                        :
                                                        @WeakestPrecondition.expr_body parameters m0 l0 (@WeakestPrecondition.expr parameters m0 l0)
                                                          (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.ltu (@Syntax.expr.load (Syntax.Build_parameters string string string) Syntax.access_size.word (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))))
                                                          (@eq (@word.rep (@width parameters) (@word parameters)) v1))
                                                       :
                                                       @WeakestPrecondition.dexpr parameters m0 l0
                                                         (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.ltu (@Syntax.expr.load (Syntax.Build_parameters string string string) Syntax.access_size.word (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))))) v1)
                                                      (@conj
                                                         (forall _ : not (@eq Z (@word.unsigned (@width parameters) (@word parameters) v1) Z0),
                                                          @WeakestPrecondition.cmd parameters (@WeakestPrecondition.call parameters functions) (@Syntax.cmd.set (Syntax.Build_parameters string string string) (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))) (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.add (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))) (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO (xO xH))))))) t0 m0 l0
                                                            (fun (t1 : @trace parameters) (m1 : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (l1 : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) =>
                                                             @WeakestPrecondition.cmd parameters (@WeakestPrecondition.call parameters functions) (@Syntax.cmd.unset (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))) t1 m1 l1
                                                               (fun (t' : @trace parameters) (m' : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (localsmap' : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) =>
                                                                @Markers.unique Prop
                                                                  (@Markers.left Prop
                                                                     (@ex (@word.rep (@width parameters) (@word parameters))
                                                                        (fun x4 : @word.rep (@width parameters) (@word parameters) =>
                                                                         @ex (@word.rep (@width parameters) (@word parameters))
                                                                           (fun x5 : @word.rep (@width parameters) (@word parameters) =>
                                                                            @ex (@word.rep (@width parameters) (@word parameters))
                                                                              (fun x6 : @word.rep (@width parameters) (@word parameters) =>
                                                                               @Markers.split Prop
                                                                                 (and
                                                                                    (@enforce parameters
                                                                                       (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                                                                          (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))
                                                                                       (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit))) x4 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit)) x5 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit) x6 tt))) localsmap')
                                                                                    (@Markers.right Prop
                                                                                       (@Markers.unique Prop
                                                                                          (@Markers.left Prop
                                                                                             (@ex (list (@word.rep (@width parameters) (@word parameters)))
                                                                                                (fun x7 : list (@word.rep (@width parameters) (@word parameters)) =>
                                                                                                 @ex (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                   (fun x8 : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop =>
                                                                                                    @ex nat
                                                                                                      (fun v' : nat =>
                                                                                                       @Markers.split Prop
                                                                                                         (and (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 m') (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x5 x4)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7) v')))
                                                                                                            (@Markers.right Prop
                                                                                                               (@Markers.split Prop
                                                                                                                  (and (lt v' v)
                                                                                                                     (forall (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : and (@eq (@trace parameters) T t') (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 M)),
                                                                                                                      and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 M))))))))))))))))))))))
                                                         (forall _ : @eq Z (@word.unsigned (@width parameters) (@word parameters) v1) Z0,
                                                          @WeakestPrecondition.cmd parameters (@WeakestPrecondition.call parameters functions) (@Syntax.cmd.set (Syntax.Build_parameters string string string) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString))))) t0 m0 l0
                                                            (fun (t1 : @trace parameters) (m1 : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (l1 : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) =>
                                                             @WeakestPrecondition.cmd parameters (@WeakestPrecondition.call parameters functions) (@Syntax.cmd.unset (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))) t1 m1 l1
                                                               (fun (t' : @trace parameters) (m' : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (localsmap' : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) =>
                                                                @Markers.unique Prop
                                                                  (@Markers.left Prop
                                                                     (@ex (@word.rep (@width parameters) (@word parameters))
                                                                        (fun x4 : @word.rep (@width parameters) (@word parameters) =>
                                                                         @ex (@word.rep (@width parameters) (@word parameters))
                                                                           (fun x5 : @word.rep (@width parameters) (@word parameters) =>
                                                                            @ex (@word.rep (@width parameters) (@word parameters))
                                                                              (fun x6 : @word.rep (@width parameters) (@word parameters) =>
                                                                               @Markers.split Prop
                                                                                 (and
                                                                                    (@enforce parameters
                                                                                       (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                                                                          (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))
                                                                                       (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit))) x4 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit)) x5 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit) x6 tt))) localsmap')
                                                                                    (@Markers.right Prop
                                                                                       (@Markers.unique Prop
                                                                                          (@Markers.left Prop
                                                                                             (@ex (list (@word.rep (@width parameters) (@word parameters)))
                                                                                                (fun x7 : list (@word.rep (@width parameters) (@word parameters)) =>
                                                                                                 @ex (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                   (fun x8 : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop =>
                                                                                                    @ex nat
                                                                                                      (fun v' : nat =>
                                                                                                       @Markers.split Prop
                                                                                                         (and (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 m') (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x5 x4)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7) v')))
                                                                                                            (@Markers.right Prop
                                                                                                               (@Markers.split Prop
                                                                                                                  (and (lt v' v)
                                                                                                                     (forall (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : and (@eq (@trace parameters) T t') (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 M)),
                                                                                                                      and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 M))))))))))))))))))))))
                                                         (fun H11 : not (@eq Z (@word.unsigned (@width parameters) (@word parameters) v1) Z0) =>
                                                          (let v2 : @word.rep (@width parameters) (@word parameters) := @word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH)))) : @word.rep (@width parameters) (@word parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) : @word.rep (@width parameters) (@word parameters) in
                                                           @ex_intro (@word.rep (@width parameters) (@word parameters))
                                                             (fun v3 : @word.rep (@width parameters) (@word parameters) =>
                                                              and (@WeakestPrecondition.dexpr parameters m0 l0 (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.add (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))) (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO (xO xH)))))) v3)
                                                                (@dlet.dlet (@map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) (fun _ : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) => Prop) (@map.put (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) l0 (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))) v3)
                                                                   (fun l1 : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) =>
                                                                    @WeakestPrecondition.cmd parameters (@WeakestPrecondition.call parameters functions) (@Syntax.cmd.unset (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))) t0 m0 l1
                                                                      (fun (t' : @trace parameters) (m' : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (localsmap' : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) =>
                                                                       @Markers.unique Prop
                                                                         (@Markers.left Prop
                                                                            (@ex (@word.rep (@width parameters) (@word parameters))
                                                                               (fun x4 : @word.rep (@width parameters) (@word parameters) =>
                                                                                @ex (@word.rep (@width parameters) (@word parameters))
                                                                                  (fun x5 : @word.rep (@width parameters) (@word parameters) =>
                                                                                   @ex (@word.rep (@width parameters) (@word parameters))
                                                                                     (fun x6 : @word.rep (@width parameters) (@word parameters) =>
                                                                                      @Markers.split Prop
                                                                                        (and
                                                                                           (@enforce parameters
                                                                                              (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                                                                                 (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))
                                                                                              (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit))) x4 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit)) x5 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit) x6 tt))) localsmap')
                                                                                           (@Markers.right Prop
                                                                                              (@Markers.unique Prop
                                                                                                 (@Markers.left Prop
                                                                                                    (@ex (list (@word.rep (@width parameters) (@word parameters)))
                                                                                                       (fun x7 : list (@word.rep (@width parameters) (@word parameters)) =>
                                                                                                        @ex (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                          (fun x8 : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop =>
                                                                                                           @ex nat
                                                                                                             (fun v' : nat =>
                                                                                                              @Markers.split Prop
                                                                                                                (and (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 m') (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x5 x4)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7) v')))
                                                                                                                   (@Markers.right Prop
                                                                                                                      (@Markers.split Prop
                                                                                                                         (and (lt v' v)
                                                                                                                            (forall (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : and (@eq (@trace parameters) T t') (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 M)),
                                                                                                                             and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 M))))))))))))))))))))))) v2
                                                             (@conj (@WeakestPrecondition.dexpr parameters m0 l0 (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.add (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))) (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO (xO xH)))))) v2)
                                                                (@dlet.dlet (@map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) (fun _ : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) => Prop) (@map.put (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) l0 (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))) v2)
                                                                   (fun l1 : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) =>
                                                                    @WeakestPrecondition.cmd parameters (@WeakestPrecondition.call parameters functions) (@Syntax.cmd.unset (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))) t0 m0 l1
                                                                      (fun (t' : @trace parameters) (m' : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (localsmap' : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)) =>
                                                                       @Markers.unique Prop
                                                                         (@Markers.left Prop
                                                                            (@ex (@word.rep (@width parameters) (@word parameters))
                                                                               (fun x4 : @word.rep (@width parameters) (@word parameters) =>
                                                                                @ex (@word.rep (@width parameters) (@word parameters))
                                                                                  (fun x5 : @word.rep (@width parameters) (@word parameters) =>
                                                                                   @ex (@word.rep (@width parameters) (@word parameters))
                                                                                     (fun x6 : @word.rep (@width parameters) (@word parameters) =>
                                                                                      @Markers.split Prop
                                                                                        (and
                                                                                           (@enforce parameters
                                                                                              (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                                                                                 (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))
                                                                                              (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit))) x4 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit)) x5 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit) x6 tt))) localsmap')
                                                                                           (@Markers.right Prop
                                                                                              (@Markers.unique Prop
                                                                                                 (@Markers.left Prop
                                                                                                    (@ex (list (@word.rep (@width parameters) (@word parameters)))
                                                                                                       (fun x7 : list (@word.rep (@width parameters) (@word parameters)) =>
                                                                                                        @ex (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                          (fun x8 : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop =>
                                                                                                           @ex nat
                                                                                                             (fun v' : nat =>
                                                                                                              @Markers.split Prop
                                                                                                                (and (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 m') (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x5 x4)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7) v')))
                                                                                                                   (@Markers.right Prop
                                                                                                                      (@Markers.split Prop
                                                                                                                         (and (lt v' v)
                                                                                                                            (forall (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : and (@eq (@trace parameters) T t') (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 M)),
                                                                                                                             and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 M))))))))))))))))))))))
                                                                ((((((let v3 : @word.rep (@width parameters) (@word parameters) := @word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH)))) : @word.rep (@width parameters) (@word parameters) in
                                                                      @ex_intro (@word.rep (@width parameters) (@word parameters)) (fun v4 : @word.rep (@width parameters) (@word parameters) => and (@eq (option (@word.rep (@width parameters) (@word parameters))) (@map.get (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) l0 (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))) (@Some (@word.rep (@width parameters) (@word parameters)) v4)) (@WeakestPrecondition.expr parameters m0 l0 (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO (xO xH))))) (fun v5 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v2 (@word.add (@width parameters) (@word parameters) v4 v5)))) v3
                                                                        (@conj (@eq (option (@word.rep (@width parameters) (@word parameters))) (@map.get (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) l0 (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))) (@Some (@word.rep (@width parameters) (@word parameters)) v3)) (@WeakestPrecondition.expr parameters m0 l0 (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO (xO xH))))) (fun v4 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v2 (@word.add (@width parameters) (@word parameters) v3 v4)))
                                                                           (@eq_refl (option (@word.rep (@width parameters) (@word parameters))) (@map.get (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) l0 (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))))
                                                                           (((let v4 : @word.rep (@width parameters) (@word parameters) := @word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))) in @eq_refl (@word.rep (@width parameters) (@word parameters)) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH)))) : @word.rep (@width parameters) (@word parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))
                                                                             :
                                                                             @WeakestPrecondition.literal parameters (Zpos (xO (xO (xO xH)))) (fun v4 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v2 (@word.add (@width parameters) (@word parameters) v3 v4)))
                                                                            :
                                                                            @WeakestPrecondition.expr_body parameters m0 l0 (@WeakestPrecondition.expr parameters m0 l0) (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO (xO xH))))) (fun v4 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v2 (@word.add (@width parameters) (@word parameters) v3 v4)))
                                                                         :
                                                                         (fun v4 : @word.rep (@width parameters) (@word parameters) => and (@eq (option (@word.rep (@width parameters) (@word parameters))) (@map.get (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) l0 (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))) (@Some (@word.rep (@width parameters) (@word parameters)) v4)) (@WeakestPrecondition.expr parameters m0 l0 (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO (xO xH))))) (fun v5 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v2 (@word.add (@width parameters) (@word parameters) v4 v5)))) v3))
                                                                     :
                                                                     @WeakestPrecondition.get parameters l0 (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString))) (fun v3 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 l0 (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO (xO xH))))) (fun v4 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v2 (@word.add (@width parameters) (@word parameters) v3 v4))))
                                                                    :
                                                                    @WeakestPrecondition.expr_body parameters m0 l0 (@WeakestPrecondition.expr parameters m0 l0) (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))) (fun v3 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 l0 (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO (xO xH))))) (fun v4 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v2 (@word.add (@width parameters) (@word parameters) v3 v4))))
                                                                   :
                                                                   @WeakestPrecondition.expr parameters m0 l0 (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))) (fun v3 : @word.rep (@width parameters) (@word parameters) => @WeakestPrecondition.expr parameters m0 l0 (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO (xO xH))))) (fun v4 : @word.rep (@width parameters) (@word parameters) => @eq (@word.rep (@width parameters) (@word parameters)) v2 (@interp_binop (@width parameters) (@word parameters) Syntax.bopname.add v3 v4))))
                                                                  :
                                                                  @WeakestPrecondition.expr_body parameters m0 l0 (@WeakestPrecondition.expr parameters m0 l0) (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.add (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))) (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO (xO xH)))))) (@eq (@word.rep (@width parameters) (@word parameters)) v2))
                                                                 :
                                                                 @WeakestPrecondition.dexpr parameters m0 l0 (@Syntax.expr.op (Syntax.Build_parameters string string string) Syntax.bopname.add (@Syntax.expr.var (Syntax.Build_parameters string string string) (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString)))) (@Syntax.expr.literal (Syntax.Build_parameters string string string) (Zpos (xO (xO (xO xH)))))) v2)
                                                                (let l1 : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) := @map.put (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) l0 (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))) v2 in
                                                                 (let l2 : @map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) := @map.remove (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) l1 (String (Ascii.Ascii true false true true false true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii false false true false false true true false) EmptyString))) in
                                                                  (let x4 : @word.rep (@width parameters) (@word parameters) := v2 in
                                                                   @ex_intro (@word.rep (@width parameters) (@word parameters))
                                                                     (fun x5 : @word.rep (@width parameters) (@word parameters) =>
                                                                      @ex (@word.rep (@width parameters) (@word parameters))
                                                                        (fun x6 : @word.rep (@width parameters) (@word parameters) =>
                                                                         @ex (@word.rep (@width parameters) (@word parameters))
                                                                           (fun x7 : @word.rep (@width parameters) (@word parameters) =>
                                                                            @Markers.split Prop
                                                                              (and
                                                                                 (@enforce parameters
                                                                                    (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                                                                       (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))
                                                                                    (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit))) x5 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit)) x6 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit) x7 tt))) l2)
                                                                                 (@Markers.right Prop
                                                                                    (@Markers.unique Prop
                                                                                       (@Markers.left Prop
                                                                                          (@ex (list (@word.rep (@width parameters) (@word parameters)))
                                                                                             (fun x8 : list (@word.rep (@width parameters) (@word parameters)) =>
                                                                                              @ex (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                (fun x9 : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop =>
                                                                                                 @ex nat
                                                                                                   (fun v' : nat =>
                                                                                                    @Markers.split Prop
                                                                                                      (and (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x5 x8) x9 m0) (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x6 x5)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x8)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x8) v')))
                                                                                                         (@Markers.right Prop
                                                                                                            (@Markers.split Prop
                                                                                                               (and (lt v' v)
                                                                                                                  (forall (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x5 x8) x9 M)),
                                                                                                                   and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 M))))))))))))))))) x4
                                                                     (((let x5 : @word.rep (@width parameters) (@word parameters) := x2 in
                                                                        @ex_intro (@word.rep (@width parameters) (@word parameters))
                                                                          (fun x6 : @word.rep (@width parameters) (@word parameters) =>
                                                                           @ex (@word.rep (@width parameters) (@word parameters))
                                                                             (fun x7 : @word.rep (@width parameters) (@word parameters) =>
                                                                              @Markers.split Prop
                                                                                (and
                                                                                   (@enforce parameters
                                                                                      (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                                                                         (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))
                                                                                      (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit))) x4 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit)) x6 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit) x7 tt))) l2)
                                                                                   (@Markers.right Prop
                                                                                      (@Markers.unique Prop
                                                                                         (@Markers.left Prop
                                                                                            (@ex (list (@word.rep (@width parameters) (@word parameters)))
                                                                                               (fun x8 : list (@word.rep (@width parameters) (@word parameters)) =>
                                                                                                @ex (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                  (fun x9 : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop =>
                                                                                                   @ex nat
                                                                                                     (fun v' : nat =>
                                                                                                      @Markers.split Prop
                                                                                                        (and (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x8) x9 m0) (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x6 x4)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x8)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x8) v')))
                                                                                                           (@Markers.right Prop
                                                                                                              (@Markers.split Prop
                                                                                                                 (and (lt v' v)
                                                                                                                    (forall (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x8) x9 M)),
                                                                                                                     and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 M)))))))))))))))) x5
                                                                          (((let x6 : @word.rep (@width parameters) (@word parameters) := x3 in
                                                                             @ex_intro (@word.rep (@width parameters) (@word parameters))
                                                                               (fun x7 : @word.rep (@width parameters) (@word parameters) =>
                                                                                @Markers.split Prop
                                                                                  (and
                                                                                     (@enforce parameters
                                                                                        (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                                                                           (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))
                                                                                        (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit))) x4 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit)) x5 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit) x7 tt))) l2)
                                                                                     (@Markers.right Prop
                                                                                        (@Markers.unique Prop
                                                                                           (@Markers.left Prop
                                                                                              (@ex (list (@word.rep (@width parameters) (@word parameters)))
                                                                                                 (fun x8 : list (@word.rep (@width parameters) (@word parameters)) =>
                                                                                                  @ex (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                    (fun x9 : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop =>
                                                                                                     @ex nat
                                                                                                       (fun v' : nat =>
                                                                                                        @Markers.split Prop
                                                                                                          (and (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x8) x9 m0) (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x5 x4)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x8)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x8) v')))
                                                                                                             (@Markers.right Prop
                                                                                                                (@Markers.split Prop
                                                                                                                   (and (lt v' v)
                                                                                                                      (forall (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x8) x9 M)),
                                                                                                                       and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 M))))))))))))))) x6
                                                                               (@conj
                                                                                  (@enforce parameters
                                                                                     (@cons string (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))
                                                                                        (@cons string (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (@cons string (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))) (@nil string))))
                                                                                     (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit))) x4 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => pair.pair (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit)) x5 (@pair.mk (@word.rep (@width parameters) (@word parameters)) (fun _ : @word.rep (@width parameters) (@word parameters) => unit) x6 tt))) l2)
                                                                                  (@Markers.right Prop
                                                                                     (@Markers.unique Prop
                                                                                        (@Markers.left Prop
                                                                                           (@ex (list (@word.rep (@width parameters) (@word parameters)))
                                                                                              (fun x7 : list (@word.rep (@width parameters) (@word parameters)) =>
                                                                                               @ex (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                 (fun x8 : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop =>
                                                                                                  @ex nat
                                                                                                    (fun v' : nat =>
                                                                                                     @Markers.split Prop
                                                                                                       (and (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 m0) (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x5 x4)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7) v')))
                                                                                                          (@Markers.right Prop
                                                                                                             (@Markers.split Prop
                                                                                                                (and (lt v' v)
                                                                                                                   (forall (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 M)),
                                                                                                                    and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 M)))))))))))))
                                                                                  (@conj
                                                                                     (@eq (pair.pair (@Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH)))))))) (fun _ : @Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH))))))) => pair.pair (@Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH)))))))) (fun _ : @Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH))))))) => pair.pair (@Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH)))))))) (fun _ : @Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH))))))) => unit))))
                                                                                        (@pair.mk (@Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH)))))))) (fun _ : @Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH))))))) => pair.pair (@Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH)))))))) (fun _ : @Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH))))))) => pair.pair (@Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH)))))))) (fun _ : @Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH))))))) => unit))) v2 (@pair.mk (@Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH)))))))) (fun _ : @Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH))))))) => pair.pair (@Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH)))))))) (fun _ : @Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH))))))) => unit)) x2 (@pair.mk (@Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH)))))))) (fun _ : @Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH))))))) => unit) x3 tt)))
                                                                                        (@pair.mk (@Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH)))))))) (fun _ : @Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH))))))) => pair.pair (@Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH)))))))) (fun _ : @Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH))))))) => pair.pair (@Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH)))))))) (fun _ : @Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH))))))) => unit))) v2 (@pair.mk (@Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH)))))))) (fun _ : @Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH))))))) => pair.pair (@Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH)))))))) (fun _ : @Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH))))))) => unit)) x2 (@pair.mk (@Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH)))))))) (fun _ : @Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH))))))) => unit) x3 tt))))
                                                                                     (@eq (@map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters))
                                                                                        (@map.remove (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)
                                                                                           (@map.remove (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) (@map.remove (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) l2 (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))
                                                                                           (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))))
                                                                                        (@map.remove (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)
                                                                                           (@map.remove (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) (@map.remove (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) l2 (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))
                                                                                           (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))))
                                                                                     (@eq_refl (pair.pair (@Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH)))))))) (fun _ : @Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH))))))) => pair.pair (@Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH)))))))) (fun _ : @Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH))))))) => pair.pair (@Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH)))))))) (fun _ : @Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH))))))) => unit))))
                                                                                        (@pair.mk (@Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH)))))))) (fun _ : @Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH))))))) => pair.pair (@Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH)))))))) (fun _ : @Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH))))))) => pair.pair (@Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH)))))))) (fun _ : @Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH))))))) => unit))) v2 (@pair.mk (@Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH)))))))) (fun _ : @Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH))))))) => pair.pair (@Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH)))))))) (fun _ : @Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH))))))) => unit)) x2 (@pair.mk (@Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH)))))))) (fun _ : @Naive.rep (Zpos (xO (xO (xO (xO (xO (xO xH))))))) => unit) x3 tt))))
                                                                                     (@eq_refl (@map.rep (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters))
                                                                                        (@map.remove (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters)
                                                                                           (@map.remove (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) (@map.remove (@Syntax.varname (@syntax parameters)) (@word.rep (@width parameters) (@word parameters)) (@locals parameters) l2 (String (Ascii.Ascii false false true true false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false true true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true false false true false true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii false false false true false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString))))))
                                                                                           (String (Ascii.Ascii false false true false true true true false) (String (Ascii.Ascii true false false false false true true false) (String (Ascii.Ascii false true false false true true true false) (String (Ascii.Ascii true true true false false true true false) (String (Ascii.Ascii true false true false false true true false) (String (Ascii.Ascii false false true false true true true false) EmptyString)))))))))
                                                                                  ((let x7 : list (@word.rep (@width parameters) (@word parameters)) := @List.firstn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
                                                                                                                                                                                                                        end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                                            end in
                                                                                    @ex_intro (list (@word.rep (@width parameters) (@word parameters)))
                                                                                      (fun x8 : list (@word.rep (@width parameters) (@word parameters)) =>
                                                                                       @ex (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                         (fun x9 : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop =>
                                                                                          @ex nat
                                                                                            (fun v' : nat =>
                                                                                             @Markers.split Prop
                                                                                               (and (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x8) x9 m0) (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x5 x4)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x8)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x8) v')))
                                                                                                  (@Markers.right Prop
                                                                                                     (@Markers.split Prop
                                                                                                        (and (lt v' v)
                                                                                                           (forall (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x8) x9 M)),
                                                                                                            and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 M))))))))) x7
                                                                                      (((let x8 : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop :=
                                                                                           @sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                  end (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                                                   end (@List.skipn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
                                                                                                                                                                                                                                                                                                                                                                                                                                                       end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                           end)))
                                                                                             (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
end (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))) (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S match proof_admitted return nat with
end) match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
end)) match proof_admitted return (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) with
end) in
                                                                                         @ex_intro (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                           (fun x9 : forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop =>
                                                                                            @ex nat
                                                                                              (fun v' : nat =>
                                                                                               @Markers.split Prop
                                                                                                 (and (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x9 m0) (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x5 x4)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7) v')))
                                                                                                    (@Markers.right Prop
                                                                                                       (@Markers.split Prop
                                                                                                          (and (lt v' v)
                                                                                                             (forall (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x9 M)),
                                                                                                              and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 M)))))))) x8
                                                                                           (((let v' : nat := match proof_admitted return nat with
                                                                                                              end in
                                                                                              @ex_intro nat
                                                                                                (fun v'0 : nat =>
                                                                                                 @Markers.split Prop
                                                                                                   (and (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 m0) (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x5 x4)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7) v'0)))
                                                                                                      (@Markers.right Prop
                                                                                                         (@Markers.split Prop
                                                                                                            (and (lt v'0 v)
                                                                                                               (forall (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 M)),
                                                                                                                and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 M))))))) v'
                                                                                                (@conj (and (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 m0) (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x5 x4)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7) v')))
                                                                                                   (@Markers.right Prop
                                                                                                      (@Markers.split Prop
                                                                                                         (and (lt v' v)
                                                                                                            (forall (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 M)),
                                                                                                             and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 M)))))
                                                                                                   (@conj (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 m0) (and (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x5 x4)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7) v'))
                                                                                                      match proof_admitted return (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 m0) with
                                                                                                      end (@conj (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x5 x4)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7)))) (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7) v') match proof_admitted return (@eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x5 x4)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7)))) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                       end match proof_admitted return (@eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) x7) v') with
                                                                                                                                                                                                                                                                                                                                                                                                                                                           end))
                                                                                                   (@conj (lt v' v)
                                                                                                      (forall (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : @word.rep (@width parameters) (@word parameters)) (_ : and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 M)),
                                                                                                       and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 M)) match proof_admitted return (lt v' v) with
end
                                                                                                      (fun (T : @trace parameters) (M : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (_ _ _ : @word.rep (@width parameters) (@word parameters)) (H12 : and (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x4 x7) x8 M)) =>
                                                                                                       @conj (@eq (@trace parameters) T t0) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 M) match proof_admitted return (@eq (@trace parameters) T t0) with
end
                                                                                                         match H12 return (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 x) x0 M) with
                                                                                                         | conj _ H13 =>
                                                                                                             let H14 :
                                                                                                               @Lift1Prop.iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters))
                                                                                                                 (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                    (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))
                                                                                                                       (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH)))) : @word.rep (@width parameters) (@word parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) : @word.rep (@width parameters) (@word parameters)) (@List.firstn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
end))
                                                                                                                    (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                            end (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                                                                             end (@List.skipn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     end)))
                                                                                                                       (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                          (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
end (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))) (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S match proof_admitted return nat with
end) match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
end)) match proof_admitted return (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) with
end)))
                                                                                                                 (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                    (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                       (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                                          (@List.firstn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
                                                                                                                                                                                           end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                               end))
                                                                                                                       (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                               end (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                                                                                end (@List.skipn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        end)))
                                                                                                                          (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           end (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))) (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S match proof_admitted return nat with
end) match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     end)))) match proof_admitted return (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) with
end) :=
                                                                                                               @SeparationLogic.Tree.iff1_to_sep_of_iff1_flatten (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) mapok
                                                                                                                 (@SeparationLogic.Tree.Node (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                                    (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                                       (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                                          (@List.firstn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
                                                                                                                                                                                           end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                               end)))
                                                                                                                    (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                                       (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                               end (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                                                                                end (@List.skipn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        end)))
                                                                                                                          (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                             (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
end (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))) (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S match proof_admitted return nat with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   end) match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
end)) match proof_admitted return (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) with
end))))
                                                                                                                 (@SeparationLogic.Tree.Node (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                                    (@SeparationLogic.Tree.Node (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                                       (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                                          (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                                             (@List.firstn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
                                                                                                                                                                                              end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                  end)))
                                                                                                                       (@SeparationLogic.Tree.Node (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                                          (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                                                                    end (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     end (@List.skipn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
end))))
                                                                                                                          (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                                             (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
end (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))) (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S match proof_admitted return nat with
end) match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
end)))))
                                                                                                                    (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) match proof_admitted return (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) with
                                                                                                                                                                                                                                                                                                         end))
                                                                                                                 ((@RelationClasses.reflexivity (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@Lift1Prop.iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters))) (@RelationClasses.Equivalence_Reflexive (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@Lift1Prop.iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters))) (Lift1Prop.Equivalence_iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters))))
                                                                                                                     (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                        (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                                           (@List.firstn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
                                                                                                                                                                                            end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                end))
                                                                                                                        (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                end (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                                                                                 end (@List.skipn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         end)))
                                                                                                                           (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                              (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               end (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))) (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S match proof_admitted return nat with
end) match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         end)) match proof_admitted return (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               end)))
                                                                                                                   :
                                                                                                                   @Lift1Prop.iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters))
                                                                                                                     (@seps (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                        (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                                           (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                                              (@List.firstn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
                                                                                                                                                                                               end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                   end))
                                                                                                                           (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                                              (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                      end (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                                                                                       end (@List.skipn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               end)))
                                                                                                                                 (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                                    (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
end (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))) (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S match proof_admitted return nat with
end) match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
end)) match proof_admitted return (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) with
end)) (@nil (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)))))
                                                                                                                     (@seps (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                        (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                                           (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                                              (@List.firstn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
                                                                                                                                                                                               end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                   end))
                                                                                                                           (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                                                end (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                 end (@List.skipn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
end)))
                                                                                                                              (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                                                 (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  end (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))) (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S match proof_admitted return nat with
end) match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
end))
                                                                                                                                 (@cons (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) match proof_admitted return (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) with
                                                                                                                                                                                                                                                                                                 end (@nil (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop))))))))
                                                                                                                  :
                                                                                                                  @Lift1Prop.iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters))
                                                                                                                    (@seps (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                       (@SeparationLogic.Tree.flatten (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                                          (@SeparationLogic.Tree.Node (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                                             (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                                                (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                                                   (@List.firstn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
                                                                                                                                                                                                    end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                        end)))
                                                                                                                             (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                                                (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                        end (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                                                                                         end (@List.skipn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 end)))
                                                                                                                                   (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                                      (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
end (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))) (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S match proof_admitted return nat with
end) match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
end)) match proof_admitted return (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) with
end))))))
                                                                                                                    (@seps (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                       (@SeparationLogic.Tree.flatten (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                                          (@SeparationLogic.Tree.Node (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                                             (@SeparationLogic.Tree.Node (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                                                (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                                                   (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                                                      (@List.firstn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
                                                                                                                                                                                                       end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                           end)))
                                                                                                                                (@SeparationLogic.Tree.Node (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                                                   (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                                                                             end (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              end (@List.skipn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
end))))
                                                                                                                                   (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop)
                                                                                                                                      (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
end (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))) (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S match proof_admitted return nat with
end) match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
end)))))
                                                                                                                             (@SeparationLogic.Tree.Leaf (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) match proof_admitted return (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) with
                                                                                                                                                                                                                                                                                                                  end))))) in

                                                                                                             let H9 :=
                                                                                                               @proj1
                                                                                                                 _
                                                                                                                 _
                                                                                                                 (@SeparationLogic.Proper_sep_iff1 (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) mapok
                                                                                                                    (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                       (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                                          (@List.firstn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
                                                                                                                                                                                           end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                               end))
                                                                                                                       (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                               end (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                                                                                end (@List.skipn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        end)))
                                                                                                                          (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
end (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))) (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S match proof_admitted return nat with
end) match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
end))))
                                                                                                                    (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                                       match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                       end)
                                                                                                                    ((fun (width : Z) (word : word.word width) (word_ok : @word.ok width word) (value : Type) (mem : map.map (@word.rep width word) value) (mem_ok : @map.ok (@word.rep width word) value mem) (T0 : Type) (element : forall (_ : @word.rep width word) (_ : T0) (_ : @map.rep (@word.rep width word) value mem), Prop) (size : @word.rep width word) (default : T0) (xs0 : list T0) (start a : @word.rep width word) (Hlen : Z.lt (@word.unsigned width word (@word.sub width word a start)) (Z.mul (@word.unsigned width word size) (Z.of_nat (@Datatypes.length T0 xs0)))) (Hmod : @eq Z (Z.modulo (@word.unsigned width word (@word.sub width word a start)) (@word.unsigned width word size)) Z0) (n : nat) (Hn : @eq nat n (Z.to_nat (Z.div (@word.unsigned width word (@word.sub width word a start)) (@word.unsigned width word size)))) =>
                                                                                                                      @RelationClasses.symmetry (forall _ : @map.rep (@word.rep width word) value mem, Prop) (@Lift1Prop.iff1 (@map.rep (@word.rep width word) value mem)) (@RelationClasses.Equivalence_Symmetric (forall _ : @map.rep (@word.rep width word) value mem, Prop) (@Lift1Prop.iff1 (@map.rep (@word.rep width word) value mem)) (Lift1Prop.Equivalence_iff1 (@map.rep (@word.rep width word) value mem))) (@array width word value mem T0 element size start xs0) (@sep (@word.rep width word) value mem (@array width word value mem T0 element size start (@List.firstn T0 n xs0)) (@sep (@word.rep width word) value mem (element a (@List.hd T0 default (@List.skipn T0 n xs0))) (@array width word value mem T0 element size (@word.add width word a size) (@List.skipn T0 (S n) xs0)))) (@array_address_inbounds width word word_ok value mem mem_ok T0 element size default xs0 start a Hlen Hmod n Hn))
                                                                                                                       (@width parameters) (@word parameters) wordok (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) mapok (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               end (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                                       match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                       end
                                                                                                                       (match
                                                                                                                          x as l3
                                                                                                                          return
                                                                                                                            (forall (_ : @sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 l3) x0 m0) (_ : @eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) l3)))) (_ : @eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) l3) v)
                                                                                                                               (_ : @Lift1Prop.iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 l3) x0)
                                                                                                                                      (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 l3) x0))
                                                                                                                               (_ : @sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                                      (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                                         (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1
                                                                                                                                            (@List.firstn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) l3))
                                                                                                                                         (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                                            (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH)))))
                                                                                                                                               (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                            end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) l3)))
                                                                                                                                            (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                                                               (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))) l3)))) x0 m0)
                                                                                                                               (_ : not
                                                                                                                                      (@eq Z
                                                                                                                                         (@word.unsigned (@width parameters) (@word parameters)
                                                                                                                                            match
                                                                                                                                              @word.ltu (@width parameters) (@word parameters)
                                                                                                                                                (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                             end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) l3)) x3 return (@word.rep (@width parameters) (@word parameters))
                                                                                                                                            with
                                                                                                                                            | true => @word.of_Z (@width parameters) (@word parameters) (Zpos xH)
                                                                                                                                            | false => @word.of_Z (@width parameters) (@word parameters) Z0
                                                                                                                                            end) Z0))
                                                                                                                               (_ : @sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                                      (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                                                         (@List.firstn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
                                                                                                                                                                                                          end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                              end))
                                                                                                                                      (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                              end (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                                                                                               end (@List.skipn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       end)))
                                                                                                                                         (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                                            (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
end (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))) (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S match proof_admitted return nat with
end) match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
end)) match proof_admitted return (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) with
end)) M),
                                                                                                                             Z.lt (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                           end (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))
                                                                                                                               (Z.mul (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                                                                                                                                                                           end))))
                                                                                                                        with
                                                                                                                        | nil =>
                                                                                                                            fun (_ : @sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 (@nil (@word.rep (@width parameters) (@word parameters)))) x0 m0) (_ : @eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) (@nil (@word.rep (@width parameters) (@word parameters)))))))
                                                                                                                              (_ : @eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) (@nil (@word.rep (@width parameters) (@word parameters)))) v)
                                                                                                                              (_ : @Lift1Prop.iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 (@nil (@word.rep (@width parameters) (@word parameters)))) x0)
                                                                                                                                     (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 (@nil (@word.rep (@width parameters) (@word parameters)))) x0))
                                                                                                                              (_ : @sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                                     (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                                        (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1
                                                                                                                                           (@List.firstn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) (@nil (@word.rep (@width parameters) (@word parameters)))))
                                                                                                                                        (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                                           (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH)))))
                                                                                                                                              (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                           end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) (@nil (@word.rep (@width parameters) (@word parameters))))))
                                                                                                                                           (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                                                              (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))) (@nil (@word.rep (@width parameters) (@word parameters))))))) x0 m0)
                                                                                                                              (_ : not
                                                                                                                                     (@eq Z
                                                                                                                                        (@word.unsigned (@width parameters) (@word parameters)
                                                                                                                                           match
                                                                                                                                             @word.ltu (@width parameters) (@word parameters)
                                                                                                                                               (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                            end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) (@nil (@word.rep (@width parameters) (@word parameters))))) x3
                                                                                                                                             return (@word.rep (@width parameters) (@word parameters))
                                                                                                                                           with
                                                                                                                                           | true => @word.of_Z (@width parameters) (@word parameters) (Zpos xH)
                                                                                                                                           | false => @word.of_Z (@width parameters) (@word parameters) Z0
                                                                                                                                           end) Z0))
                                                                                                                              (_ : @sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                                     (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                                                        (@List.firstn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
                                                                                                                                                                                                         end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                             end))
                                                                                                                                     (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                             end (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                                                                                              end (@List.skipn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      end)))
                                                                                                                                        (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                                           (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            end (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))) (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S match proof_admitted return nat with
end) match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
end)) match proof_admitted return (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) with
end)) M) =>
                                                                                                                            match
                                                                                                                              proof_admitted
                                                                                                                              return
                                                                                                                                (Z.lt (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                               end (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))
                                                                                                                                   (Z.mul (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                                                                                                                                                                               end))))
                                                                                                                            with
                                                                                                                            end
                                                                                                                        | cons r x12 =>
                                                                                                                            fun (_ : @sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 (@cons (@word.rep (@width parameters) (@word parameters)) r x12)) x0 m0) (_ : @eq Z (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1)) (Z.mul (Zpos (xO (xO (xO xH)))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) (@cons (@word.rep (@width parameters) (@word parameters)) r x12)))))
                                                                                                                              (_ : @eq nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) (@cons (@word.rep (@width parameters) (@word parameters)) r x12)) v)
                                                                                                                              (_ : @Lift1Prop.iff1 (@map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)) (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 (@cons (@word.rep (@width parameters) (@word parameters)) r x12)) x0)
                                                                                                                                     (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1 (@cons (@word.rep (@width parameters) (@word parameters)) r x12)) x0))
                                                                                                                              (_ : @sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                                     (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                                        (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) x1
                                                                                                                                           (@List.firstn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) (@cons (@word.rep (@width parameters) (@word parameters)) r x12)))
                                                                                                                                        (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                                           (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH)))))
                                                                                                                                              (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                           end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) (@cons (@word.rep (@width parameters) (@word parameters)) r x12))))
                                                                                                                                           (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                                                              (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))) (@cons (@word.rep (@width parameters) (@word parameters)) r x12))))) x0 m0)
                                                                                                                              (_ : not
                                                                                                                                     (@eq Z
                                                                                                                                        (@word.unsigned (@width parameters) (@word parameters)
                                                                                                                                           match
                                                                                                                                             @word.ltu (@width parameters) (@word parameters)
                                                                                                                                               (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                            end (@List.skipn (@word.rep (@width parameters) (@word parameters)) (Z.to_nat (Z.div (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) x1)) (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))))) (@cons (@word.rep (@width parameters) (@word parameters)) r x12))) x3
                                                                                                                                             return (@word.rep (@width parameters) (@word parameters))
                                                                                                                                           with
                                                                                                                                           | true => @word.of_Z (@width parameters) (@word parameters) (Zpos xH)
                                                                                                                                           | false => @word.of_Z (@width parameters) (@word parameters) Z0
                                                                                                                                           end) Z0))
                                                                                                                              (_ : @sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                                     (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))
                                                                                                                                        (@List.firstn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
                                                                                                                                                                                                         end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                             end))
                                                                                                                                     (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                             end (@List.hd (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                                                                                                                                                                                                              end (@List.skipn (@word.rep (@width parameters) (@word parameters)) match proof_admitted return nat with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  end match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      end)))
                                                                                                                                        (@sep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters)
                                                                                                                                           (@array (@width parameters) (@word parameters) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters) (@word.rep (@width parameters) (@word parameters)) (@scalar (@width parameters) (@word parameters) (@byte parameters) (@mem parameters)) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))) (@word.add (@width parameters) (@word parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
end (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))) (@List.skipn (@word.rep (@width parameters) (@word parameters)) (S match proof_admitted return nat with
end) match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
end)) match proof_admitted return (forall _ : @map.rep (@word.rep (@width parameters) (@word parameters)) (@word.rep (Zpos (xO (xO (xO xH)))) (@byte parameters)) (@mem parameters), Prop) with
end)) M) =>
                                                                                                                            match
                                                                                                                              proof_admitted
                                                                                                                              return
                                                                                                                                (Z.lt (@word.unsigned (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) match proof_admitted return (@word.rep (@width parameters) (@word parameters)) with
                                                                                                                                                                                                                                               end (@word.add (@width parameters) (@word parameters) (@word.add (@width parameters) (@word parameters) x1 (@word.slu (@width parameters) (@word parameters) (@word.sru (@width parameters) (@word parameters) (@word.sub (@width parameters) (@word parameters) x2 x1) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xI xH))))) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH))))))))
                                                                                                                                   (Z.mul (@word.unsigned (@width parameters) (@word parameters) (@word.of_Z (@width parameters) (@word parameters) (Zpos (xO (xO (xO xH)))))) (Z.of_nat (@Datatypes.length (@word.rep (@width parameters) (@word parameters)) match proof_admitted return (list (@word.rep (@width parameters) (@word parameters))) with
                                                                                                                                                                                                                                                                                                                                                               end))))
                                                                                                                            with
                                                                                                                            end
                                                                                                                        end H3 H5 H6 H8 H10 H11 H9))) in _ end )))))))))))))))))))))))))))))))))))) end end))))))))))))).


Qed. (* Error: No such section variable or assumption: H9. *)

Local Set Simplex.